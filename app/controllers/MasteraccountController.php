<?php

class MasteraccountController extends ControllerBase {

  public $detailConfigAllied;

  public function initialize() {
    $this->tag->setTitle("Cuenta maestra");
    parent::initialize(); // TODO: Change the autogenerated stub
  }

  public function indexAction() {
    $msg = $this->session->get("msgSuccess");
    if (isset($msg)) {
      $this->notification->success($msg);
      $this->session->remove("msgSuccess");
    }
    $currentPage = $this->request->getQuery('page', null, 1);
    $builder = $this->modelsManager->createBuilder()
            ->from('Masteraccount')
            ->where("Masteraccount.idMasteraccount  = {$this->user->Usertype->idMasteraccount}")
            ->orderBy('Masteraccount.created DESC');

    if ($this->user->Role->idRole == -1) {
      $builder = $this->modelsManager->createBuilder()
              ->from('Masteraccount')
              ->orderBy('Masteraccount.created DESC');
    }

    $paginator = new Phalcon\Paginator\Adapter\QueryBuilder(array(
        "builder" => $builder,
        "limit" => \Sigmamovil\General\Misc\PaginationDecorator::DEFAULT_LIMIT,
        "page" => $currentPage
    ));

    $services = Services::find();
    $page = $paginator->getPaginate();
    $this->view->setVar("services", $services);
    $this->view->setVar("page", $page);
  }

  public function createAction() {
    $masteraccountform = new MasteraccountForm();
    $this->view->setVar('masteraccountform', $masteraccountform);
    try {
      $dataJson = $this->request->getRawBody();
      $data = json_decode($dataJson);
      $data2 = json_decode($dataJson, true);
      if (!empty($data)) {
        $masteraccount = new Masteraccount();
        $masteraccountform->bind($data2, $masteraccount);

        if (!$masteraccountform->isValid()) {
          foreach ($masteraccountform->getMessages() as $msg) {
            throw new \InvalidArgumentException($msg);
          }
        }
        $name = trim($data->nameMasterAccount);
        if (strlen($name) > 60) {
          throw new \InvalidArgumentException("El nombre no puede contener mas de 60 caracteres");
        }
        if (empty($data->paymentPlan)) {
          throw new \InvalidArgumentException("Debes seleccionar un plan de pago");
        }
        if (empty($data->idAccountCategory)) {
          throw new \InvalidArgumentException("Debes seleccionar una categoría");
        }
        if (empty($data->idSmsSendingRule)) {
          throw new \InvalidArgumentException("Debes seleccionar al menos una Regla de envío de SMS");
        }
        if (!is_numeric($data->city)) {
          throw new \InvalidArgumentException("La ciudad para la cuenta maestra es obligatoria");
        }

        $masteraccount->address = $data->address;
        $masteraccount->idCity = $data->city;
        $masteraccount->name = $data->nameMasterAccount;
        $masteraccount->nit = $data->nit;
        $masteraccount->phone = $data->phone;
        $masteraccount->status = ($data->status ? 1 : 0);
        if (isset($data->description)) {
          $masteraccount->description = $data->description;
        }
        $masteraccount->idPaymentPlan = $data->paymentPlan;
        $masteraccount->idAccountCategory = $data->idAccountCategory;
        $masteraccount->idSmsSendingRule = $data->idSmsSendingRule;

        $paymentPlanxService = PaymentPlanxservice::find(array(
                    "conditions" => "idPaymentPlan = ?0",
                    "bind" => [0 => $data->paymentPlan]
        ));

        if (!$paymentPlanxService) {
          throw new InvalidArgumentException("El plan seleccionado no posee configuración");
        }

        $this->db->begin();
        if (!$masteraccount->save()) {
          $this->db->rollback();
          foreach ($masteraccount->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }

        $this->saveSmsSendingRule($data->idSmsSendingRule, $masteraccount->idMasteraccount);

        $masterConfig = new MasterConfig();
        $masterConfig->idMasteraccount = $masteraccount->idMasteraccount;
        $masterConfig->diskSpace = $paymentPlanxService[0]->PaymentPlan->diskSpace;

        if (!$masterConfig->save()) {
          $this->db->rollback();
          foreach ($masterConfig->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }

        $this->createAccountCategory($masteraccount->idMasteraccount, null, "Demo", 1);
        $this->createAccountCategory($masteraccount->idMasteraccount, null, "Producción", 0);

        foreach ($paymentPlanxService as $value) {
          $detailConfig = new DetailConfig();

          $detailConfig->idMasterConfig = $masterConfig->idMasterConfig;
          $detailConfig->idPlanType = $value->idPlanType;
          $detailConfig->idServices = $value->idServices;
          $detailConfig->idPriceList = $value->idPriceList;
          $detailConfig->status = $value->status;
          $detailConfig->amount = $value->amount;
          $detailConfig->totalAmount = $value->amount;
          $detailConfig->speed = $value->speed;
          $detailConfig->accountingMode = $value->accountingMode;

          if (!$detailConfig->save()) {
            $this->db->rollback();
            foreach ($detailConfig->getMessages() as $message) {
              throw new \InvalidArgumentException($message);
            }
          }

          $ppxsxmta = Ppxsxmta::find(array(
                      "conditions" => "idPaymentPlanxService = ?0",
                      "bind" => [0 => $value->idPaymentPlanxService]
          ));

          if (count($ppxsxmta) > 0) {
            foreach ($ppxsxmta as $ppxsxmtaValue) {
              $dcxmta = new Dcxmta();
              $dcxmta->idDetailConfig = $detailConfig->idDetailConfig;
              $dcxmta->idMta = $ppxsxmtaValue->idMta;

              if (!$dcxmta->save()) {
                $this->db->rollback();
                foreach ($dcxmta->getMessages() as $message) {
                  throw new \InvalidArgumentException($message);
                }
              }
            }
          }

          $ppxsxadapter = Ppxsxadapter::find(array(
                      "conditions" => "idPaymentPlanxService = ?0",
                      "bind" => [0 => $value->idPaymentPlanxService]
          ));

          if (count($ppxsxadapter) > 0) {
            foreach ($ppxsxadapter as $ppxsxadapterValue) {
              $dcxadapter = new Dcxadapter();
              $dcxadapter->idDetailConfig = $detailConfig->idDetailConfig;
              $dcxadapter->idAdapter = $ppxsxadapterValue->idAdapter;

              if (!$dcxadapter->save()) {
                $this->db->rollback();
                foreach ($dcxadapter->getMessages() as $message) {
                  throw new \InvalidArgumentException($message);
                }
              }
            }
          }

          $ppxsxmailClass = PpxsxmailClass::find(array(
                      "conditions" => "idPaymentPlanxService = ?0",
                      "bind" => [0 => $value->idPaymentPlanxService]
          ));

          if (count($ppxsxmailClass) > 0) {
            foreach ($ppxsxmailClass as $ppxsxmailClassValue) {
              $dcxmailClass = new Dcxmailclass();
              $dcxmailClass->idDetailConfig = $detailConfig->idDetailConfig;
              $dcxmailClass->idMailClass = $ppxsxmailClassValue->idMailClass;

              if (!$dcxmailClass->save()) {
                $this->db->rollback();
                foreach ($dcxmailClass->getMessages() as $message) {
                  throw new \InvalidArgumentException($message);
                }
              }
            }
          }

          $ppxsxurldomain = Ppxsxurldomain::find(array(
                      "conditions" => "idPaymentPlanxService = ?0",
                      "bind" => [0 => $value->idPaymentPlanxService]
          ));

          if (count($ppxsxurldomain) > 0) {
            foreach ($ppxsxurldomain as $ppxsxurldomainValue) {
              $dcxurldomain = new Dcxurldomain();
              $dcxurldomain->idDetailConfig = $detailConfig->idDetailConfig;
              $dcxurldomain->idUrldomain = $ppxsxurldomainValue->idUrldomain;

              if (!$dcxurldomain->save()) {
                $this->db->rollback();
                foreach ($dcxurldomain->getMessages() as $message) {
                  throw new \InvalidArgumentException($message);
                }
              }
            }
          }
        }
        $this->db->commit();

        $this->notification->success("Se ha creado la cuenta maestra correctamente!");
        return $this->set_json_response(array("idMasterAccount" => $masteraccount->idMasteraccount), 200, "OK");
      }
    } catch (InvalidArgumentException $e) {
      \Phalcon\DI::getDefault()->get("response")->setStatusCode(409, 'fail');
      $arrMsg[] = $e->getMessage();
      $this->response->setJsonContent($arrMsg);
      return $this->response;
    } catch (Exception $e) {
      $this->trace("fail", $e->getTraceAsString());
      $this->logger->log("Exception while creating masteraccount: {$e->getMessage()}");
      $this->logger->log($e->getTraceAsString());
      $this->notification->error("Ocurrió un error, por favor contacte al administrador");
    }
  }

  public function editAction($idMasteraccount) {
    $flag = false;

    if ($this->user->Role->idRole == -1) {
      $flag = true;
    } else if ($this->user->Usertype->idMasteraccount == $idMasteraccount) {
      $flag = true;
    }

    if ($flag) {
      $masteraccount = Masteraccount::findFirst(array(
                  "conditions" => "idMasteraccount = ?1",
                  "bind" => array(1 => $idMasteraccount)
      ));
    }
    if (!$masteraccount) {
      $this->notification->error('La cuenta maestra que desea editar no existe, por favor valide la información');
      return $this->response->redirect('masteraccount');
    }
    $city = City::findByIdCity($masteraccount->idCity);
    $state = State::findByIdState($city[0]->idState);
    $idState = $city[0]->idState;
    $idcountry = $state[0]->idCountry;

    $this->view->setVar("idCountry", $idcountry);
    $this->view->setVar("idState", $idState);
    $masteraccountform = new MasteraccountForm($masteraccount);
    $this->view->setVar('form', $masteraccountform);
    $this->view->setVar('masteraccount', $masteraccount);

    try {
      if ($this->request->isPost()) {
        $dataJson = $this->request->getRawBody();
        $data = json_decode($dataJson);
        $data2 = json_decode($dataJson, true);

        if (!is_numeric($data->city)) {
          throw new \InvalidArgumentException("La ciudad es de caracter obligatorio");
        }
        if (empty($data->idAccountCategory)) {
          throw new \InvalidArgumentException("Debes seleccionar una categoría");
        }
        if (empty($data->idSmsSendingRule)) {
          throw new \InvalidArgumentException("Debes seleccionar una Regla de envío de SMS");
        }

        $masteraccountform->bind($data2, $masteraccount);
        $name = $data->nameMasterAccount;
        $status = $data->status;
        $masteraccount->name = $name;
        $masteraccount->status = (empty($status) ? 0 : 1);

        $this->db->begin();
        if (!$masteraccount->save()) {
          foreach ($masteraccount->getMessages() as $message) {
            throw new Exception($message);
          }
          $this->db->rollback();
          $this->trace("fail", "No se creo la cuenta maestra");
        }

        $this->deleteSmsSendingRules($masteraccount->idMasteraccount);
        $this->saveSmsSendingRule($data->idSmsSendingRule, $masteraccount->idMasteraccount);

        $this->db->commit();
        $this->notification->info("La cuenta maestra se actualizo correctamente");
        $this->trace("success", "Se edito la clasificación de cuenta: {$masteraccount->idMasteraccount}/{$masteraccount->name}");
        return $this->response->redirect('masteraccount');
      }
    } catch (InvalidArgumentException $msg) {
      $this->notification->error($msg->getMessage());
    } catch (Exception $e) {
      $this->notification->error($e->getMessage());
    }
  }

  public function aliaslistAction($idMasteraccount) {
    if (!isset($idMasteraccount) || $idMasteraccount == null || $idMasteraccount == "") {
      $this->notification->error("Verifique la información enviada");
      $this->response->redirect("");
      return false;
    }
    $flag = false;
    if ($this->user->Role->idRole == -1) {
      $flag = true;
    } else if ($this->user->Usertype->idMasteraccount == $idMasteraccount) {
      $flag = true;
    } else {
      $this->notification->error("No tiene permisos para entrar a este sitio");
      $this->response->redirect("masteraccount");
      return false;
    }
    $configMaster = MasterConfig::findFirst(array("conditions" => "idMasteraccount = ?0", "bind" => [0 => $idMasteraccount]));
    $currentPage = $this->request->getQuery('page', null, 1);
    if ($flag == true) {
      $builder = $this->modelsManager->createBuilder()
              ->from('Allied')
              ->leftjoin('Alliedconfig', 'Allied.idAllied = Alliedconfig.idAllied')
              ->where('Allied.idMasteraccount = ' . $idMasteraccount)
              ->orderBy('Allied.created DESC');
      $paginator = new Phalcon\Paginator\Adapter\QueryBuilder(array(
          "builder" => $builder,
          "limit" => 15,
          "page" => $currentPage
      ));
      $page = $paginator->getPaginate();

      $detailConfigMaster = DetailConfig::find(array(
                  "conditions" => "idMasterConfig = ?0",
                  "bind" => [0 => $this->user->Usertype->Masteraccount->MasterConfig->idMasterConfig]
      ));

      foreach ($detailConfigMaster as $ser) {
        if ($ser->idServices == $this->services->sms) {
          $limitSmsMaster = $ser->amount;
        } else if ($ser->idServices == $this->services->email_marketing) {
          $limitContactMaster = $ser->amount;
          $accountingModeMaster = $ser->accountingMode;
        } else if ($ser->idServices == $this->services->sms_two_way) {
          $limitSmstwowayMaster = $ser->amount;
        } else if ($ser->idServices == $this->services->landing_page) {
          $limitLandingpageMaster = $ser->amount;
        }
      }

      $this->view->setVar("limitSmsMaster", $limitSmsMaster);
      $this->view->setVar("limitSmstwowayMaster", $limitSmstwowayMaster);
      $this->view->setVar("limitContactMaster", $limitContactMaster);
      $this->view->setVar("accountingModeMaster", $accountingModeMaster);
      $this->view->setVar("limitLandingpageMaster", $limitLandingpageMaster);

      $this->view->setVar("page", $page);
      $this->view->setVar("configMaster", $configMaster);
      $this->view->setVar("idMasteraccount", $idMasteraccount);
    }
  }

  public function aliaslistuserAction($idMasteraccount) {
    if (!$idMasteraccount) {
      $this->notification->error('No se ha podido ingresar verifique la información enviada');
      return $this->response->redirect('masteraccount');
    }
    $masteraccount = Masteraccount::findFirst(["conditions" => "idMasteraccount = ?0", "bind" => [0 => $idMasteraccount]]);
    $currentPage = $this->request->getQuery('page', null, 1);
    $builder = $this->modelsManager->createBuilder()
            ->from('User')
            ->join("Usertype", "Usertype.idUsertype = User.idUsertype")
            ->where("Usertype.idMasteraccount  = {$idMasteraccount}")
            ->orderBy('User.created');

    $paginator = new Phalcon\Paginator\Adapter\QueryBuilder(array(
        "builder" => $builder,
        "limit" => 15,
        "page" => $currentPage
    ));

    $page = $paginator->getPaginate();
    $this->view->setVar("nameMasteraccount", $masteraccount->name);
    $this->view->setVar("page", $page);
    $this->view->setVar("idMasteraccount", $idMasteraccount);
  }

  public function aliascreateAction($idMasteraccount) {
    $flag = false;
    if ($this->user->Role->idRole == -1) {
      $flag = true;
    } else if ($this->user->Usertype->idMasteraccount == $idMasteraccount) {
      $flag = true;
    } else {
      $this->notification->error("No tiene permisos para entrar a este sitio");
      $this->response->redirect("masteraccount/aliaslist/" . $this->user->Usertype->idMasteraccount);
    }

    $aliasform = new AliasForm();
    $masteraccount = Masteraccount::findFirst(array(
                'conditions' => 'idMasteraccount = ?1',
                'bind' => array(1 => $idMasteraccount)
    ));

    if (!$masteraccount) {
      $this->notification->error("La cuenta maestra enviada no existe, por favor verifique la información");
      return $this->response->redirect("masteraccount/aliaslist");
    }

    $this->view->setVar('AliasForm', $aliasform);
    $this->view->setVar('masteraccount', $masteraccount);

    $dataJson = $this->request->getRawBody();
    $data = json_decode($dataJson, true);
    if (!empty($data)) {
      try {
        $this->db->begin();
        $allied = new Allied();
        $aliasform->bind($data, $allied);
        $allied->idCity = $data['idCity'];
        $allied->idMasteraccount = $idMasteraccount;
        $allied->idPaymentPlan = $data['idPaymentPlan'];
        $allied->idAccountCategory = $data['idAccountCategory'];

        if (!$aliasform->isValid()) {
          foreach ($aliasform->getMessages() as $msg) {
            throw new \InvalidArgumentException($msg);
          }
        }

        if (!is_numeric($data['idCity'])) {
          throw new InvalidArgumentException("La ciudad es de caracter obligatoria");
        }
        if (empty($data['idAccountCategory'])) {
          throw new \InvalidArgumentException("Debes seleccionar una categoría");
        }

        $masterConfig = MasterConfig::findFirst(array(
                    "conditions" => "idMasteraccount = ?0",
                    "bind" => [0 => $idMasteraccount]
        ));

        if (!$masterConfig) {
          throw new InvalidArgumentException("La cuenta maestra no tiene configuración, por favor contacte a soporte");
        }

        $detailConfigMaster = DetailConfig::find(array(
                    "conditions" => "idMasterConfig = ?0",
                    "bind" => [0 => $masterConfig->idMasterConfig]
        ));

        if (!$detailConfigMaster) {
          throw new InvalidArgumentException("La cuenta maestra no tiene configuración, por favor contacte a soporte");
        }

        $paymentPlanxService = PaymentPlanxservice::find(array(
                    "conditions" => "idPaymentPlan = ?0",
                    "bind" => [0 => $data['idPaymentPlan']]
        ));

        if (!$paymentPlanxService) {
          throw new InvalidArgumentException("El plan seleccionado no posee configuración");
        }

        if (!$allied->save()) {
          foreach ($allied->getMessages() as $message) {
            throw new InvalidArgumentException($message);
          }
        }

        $this->createDefaultSystemMails($allied->idAllied);


        $alliedConfig = new Alliedconfig();
        $alliedConfig->idAllied = $allied->idAllied;
        $alliedConfig->diskSpace = $paymentPlanxService[0]->PaymentPlan->diskSpace;

        if (!$alliedConfig->save()) {
          foreach ($alliedConfig->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }

        $this->createAccountCategory(null, $allied->idAllied, "Demo", 1);
        $this->createAccountCategory(null, $allied->idAllied, "Producción", 0);

        foreach ($detailConfigMaster as $key => $configMaster) {
          if (count($paymentPlanxService) == 1) {
            $this->createOnePlan($paymentPlanxService, $configMaster, $alliedConfig);
          } else {
            $this->selectTwoPlan($paymentPlanxService, $key, $configMaster, $alliedConfig);
          }
        }

        $masterConfig->diskSpace = $masterConfig->diskSpace - $this->detailConfigAllied->Alliedconfig->diskSpace;

        if (!$masterConfig->save()) {
          foreach ($alliedConfig->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }

        $this->db->commit();
        $this->notification->success("Se ha creado la cuenta aliada correctamente!");
        return $this->set_json_response($allied->idAllied, 200, "OK");
      } catch (InvalidArgumentException $msg) {
        $this->db->rollback();
        $arrMsg[] = $msg->getMessage();
        return $this->set_json_response($arrMsg, 409, "FAIL");
      } catch (Exception $e) {
        $this->db->rollback();
        $this->trace("fail", "Contacte con el administrador: $e");
        $this->logger->log("Contacte con el administrador {$e}");
        $this->notification->error($e->getMessage());
      }
    }
  }

  public function createDefaultSystemMails($idAllied) {

    $types = array("statistic-notification", "mail-finished", "sms-finished");

    $systemMail = \Systemmail::find(array(
                "conditions" => "idAllied is null AND (category = ?0 OR category = ?1 or category = ?2)",
                "bind" => array($types[0], $types[1], $types[2])
    ));

    foreach ($systemMail as $sm) {

      $mySystemMail = new \Systemmail();
      $mySystemMail->category = $sm->category;
      $mySystemMail->content = $sm->content;
      $mySystemMail->description = $sm->description;
      $mySystemMail->fromEmail = $sm->fromEmail;
      $mySystemMail->fromName = $sm->fromName;
      $mySystemMail->idAllied = $idAllied;
      $mySystemMail->name = $sm->name;
      $mySystemMail->plainText = $sm->plainText;
      $mySystemMail->previewData = $sm->previewData;
      $mySystemMail->subject = $sm->subject;

      if (!$mySystemMail->save()) {
        foreach ($mySystemMail->getMessages() as $message) {
          throw new InvalidArgumentException($message);
        }
        $this->trace("fail", "No se pudo crear los correos del sistema del aliado idAllied=" . $idAllied);
      }
    }
  }

  public function aliaseditAction($idAlias) {
    $flag = false;
    if ($this->user->Role->idRole == -1) {
      $flag = true;
    } else {
      foreach ($this->user->Usertype->Masteraccount->Allied as $key) {
        if ($key->idAllied == $idAlias) {
          $flag = true;
        }
      }
    }
    if ($flag == true) {
      $alias = Allied::findFirst(array(
                  'conditions' => 'idAllied= ?1',
                  'bind' => array(1 => $idAlias)
      ));
      $city = City::findByIdCity($alias->idCity);
      $state = State::findByIdState($city[0]->idState);
      $idState = $city[0]->idState;
      $idcountry = $state[0]->idCountry;
      $this->view->setVar("idCountry", $idcountry);
      $this->view->setVar("idState", $idState);
    }
    if (!$alias) {
      $this->notification->error("La cuenta aliada que intenta modificar no existe, por favor verifique la información");
      $this->response->redirect("masteraccount/aliaslist/" . $this->user->Usertype->idMasteraccount);
    }

    $aliasform = new AliasForm($alias);
    $this->view->setVar('aliasform', $aliasform);
    $this->view->setVar('alias', $alias);
    try {
      if ($this->request->isPost()) {

        $aliasform->bind($this->request->getPost(), $alias);
//          if (!$aliasform->isValid()) {
//          foreach ($aliasform->getMessages() as $msg) {
//            throw new \InvalidArgumentException($msg);
//          }
//        }
//        var_dump($aliasform);
//        exit();
        $this->db->begin();
        $status = $this->request->getPost('status');
        $alias->status = (empty($status) ? 0 : 1);

        if (!$alias->save()) {
          foreach ($alias->getMessages() as $message) {
            throw new InvalidArgumentException($message);
          }
          $this->db->rollback();
          $this->trace("fail", "No se creo el alias en la cuenta maestra");
        }

        $this->db->commit();
        $this->notification->info('Se ha editado exitosamente la cuenta aliada <strong>' . $alias->name . '</strong>');
        $this->trace("success", "Se edito una cuenta aliada con ID: {$alias->idAlias}");
        return $this->response->redirect("masteraccount/aliaslist/{$alias->idMasteraccount}");
      }
    } catch (InvalidArgumentException $msg) {
      $this->notification->error($msg->getMessage());
    } catch (Exception $e) {
      $this->notification->error($e->getMessage());
    }
  }

  public function aliasconfigeditAction($idAlias) {

    $flag = false;
    if ($this->user->Role->idRole == -1) {
      $flag = true;
    } else {
      foreach ($this->user->Usertype->Masteraccount->Allied as $key) {
        if ($key->idAllied == $idAlias) {
          $flag = true;
        }
      }
    }
    if ($flag == true) {
      $config = Alliedconfig::findFirst(array(
                  'conditions' => 'idAllied = ?1',
                  'bind' => array(1 => $idAlias)
      ));

      $alias = Allied::findFirst(array(
                  'conditions' => 'idAllied = ?1',
                  'bind' => array(1 => $idAlias)
      ));
      $idMasteraccount = $alias->idMasteraccount;
      $configMasteraccount = Masteraccount::findFirst(array(
                  'conditions' => 'idMasteraccount = ?1',
                  'bind' => array(1 => $idMasteraccount)
      ));
      $mta = $this->modelsManager->createBuilder()
              ->from('Mta')
              ->join('Maxmta', 'Maxmta.idMta = Mta.idMta')
              ->where('Maxmta.idMasteraccount = ' . $idMasteraccount)
              ->orderBy('Mta.name')
              ->getQuery()
              ->execute();
      $this->view->setVar('mta', $mta);

      $adapter = $this->modelsManager->createBuilder()
              ->from('Adapter')
              ->join('Maxadapter', 'Maxadapter.idAdapter = Adapter.idAdapter')
              ->where('Maxadapter.idMasteraccount = ' . $idMasteraccount)
              ->getQuery()
              ->execute();
      $this->view->setVar('adapter', $adapter);

      $mailclass = $this->modelsManager->createBuilder()
              ->from('Mailclass')
              ->join('Maxmailclass', 'Maxmailclass.idMailclass = Mailclass.idMailclass')
              ->where('Maxmailclass.idMasteraccount = ' . $idMasteraccount)
              ->getQuery()
              ->execute();
      $this->view->setVar('mailclass', $mailclass);

      $urldomain = $this->modelsManager->createBuilder()
              ->from('Urldomain')
              ->join('Maxurldomain', 'Maxurldomain.idUrldomain = Urldomain.idUrldomain')
              ->where('Maxurldomain.idMasteraccount = ' . $idMasteraccount)
              ->getQuery()
              ->execute();
      $this->view->setVar('urldomain', $urldomain);
//        $configEdit = $config;
      $configform = new ConfigForm();
      $this->view->setVar('ConfigForm', $configform);
      $this->view->setVar('config', $config);
      $this->view->setVar('alias', $alias);
      $this->view->setVar('masteraccount', $configMasteraccount);
    }


    if (!$config) {
      $this->notification->error("La cuenta aliada que intenta modificar no existe, por favor verifique la información");
      $this->response->redirect("masteraccount/aliaslist/" . $this->user->Usertype->idMasteraccount);
    }

    try {
      if ($this->request->isPost()) {
        $configEdit = Alliedconfig::findFirst(array(
                    'conditions' => 'idAllied = ?1',
                    'bind' => array(1 => $idAlias)
        ));
        $configform->bind($this->request->getPost(), $config);
        $accoutingManager = new \Sigmamovil\General\Misc\AccountingManager();
        $this->db->begin();
        $accoutingManager->alliedConfigEdit($config, $configEdit);
        $this->db->commit();
        $this->notification->info('Se ha editado exitosamente la configuración de la cuenta aliada <strong>' . $alias->name . '</strong>.');
        $this->trace("success", "Se edito la configuración de una cuenta aliada");
        return $this->response->redirect("masteraccount/aliaslist/{$alias->idMasteraccount}");
      }
    } catch (InvalidArgumentException $msg) {
      $this->notification->error($msg->getMessage());
    } catch (Exception $e) {
      $this->notification->error($e->getMessage());
    }
  }

  public function myconfigeditAction($idMasteraccount) {
    $masteraccount = Masteraccount::findFirst(array(
                'conditions' => 'idMasteraccount = ?0',
                'bind' => array(0 => $idMasteraccount)
    ));
    $mta = Mta::find();
    $adapter = Adapter::find();
    $url = Urldomain::find();
    $mailclass = Mailclass::find();
    $configForm = new ConfigForm($masteraccount->Config);
    $this->view->setVar('configForm', $configForm);
    $this->view->setVar('masteraccount', $masteraccount);
    $this->view->setVar('adapter', $adapter);
    $this->view->setVar('mta', $mta);
    $this->view->setVar('urlDomain', $url);
    $this->view->setVar('mailclass', $mailclass);
    if ($this->request->isPost()) {
      try {
        $config = Config::findFirst(array(
                    'conditions' => 'idMasteraccount = ?0',
                    'bind' => array(0 => $idMasteraccount)
        ));

        $configForm->bind($this->request->getPost(), $config);
        if (!$configForm->isValid()) {
          foreach ($configForm->getMessages() as $msg) {
            throw new \InvalidArgumentException($msg);
          }
        }
        $expiryDate = strtotime($this->request->getPost('expiryDate'));
        if ($expiryDate < time()) {
          throw new InvalidArgumentException("La fecha de expedicion no puede ser inferior a la fecha acual");
        }


        $this->db->begin();
        if (!$config->save()) {
          $this->db->rollback();
          foreach ($config->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
        $maxmta = Maxmta::findByIdMasteraccount($idMasteraccount);
        if (!$maxmta->delete()) {
          $this->db->rollback();
          foreach ($maxmta->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
        $maxadapter = Maxadapter::findByIdMasteraccount($idMasteraccount);
        if (!$maxadapter->delete()) {
          $this->db->rollback();
          foreach ($maxadapter->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
        $maxurl = Maxurldomain::findByIdMasteraccount($idMasteraccount);
        if (!$maxurl->delete()) {
          $this->db->rollback();
          foreach ($maxurl->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
        $maxmail = Maxmailclass::findByIdMasteraccount($idMasteraccount);
        if (!$maxmail->delete()) {
          $this->db->rollback();
          foreach ($maxmail->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }

        foreach ($this->request->getPost("idMta") as $key) {
          $mta = new Maxmta();
          $mta->idMta = $key;
          $mta->idMasteraccount = $idMasteraccount;
          if (!$mta->save()) {
            $this->db->rollback();
            foreach ($mta->getMessages() as $message) {
              throw new \InvalidArgumentException($message);
            }
          }
        }
        foreach ($this->request->getPost("idUrldomain") as $key) {
          $urldomain = new Maxurldomain();
          $urldomain->idUrldomain = $key;
          $urldomain->idMasteraccount = $idMasteraccount;
          if (!$urldomain->save()) {
            $this->db->rollback();
            foreach ($urldomain->getMessages() as $message) {
              throw new \InvalidArgumentException($message);
            }
          }
        }

        foreach ($this->request->getPost("idMailClass") as $key) {
          $mailclass = new Maxmailclass();
          $mailclass->idMailClass = $key;
          $mailclass->idMasteraccount = $idMasteraccount;
          if (!$mailclass->save()) {
            $this->db->rollback();
            foreach ($mailclass->getMessages() as $message) {
              throw new \InvalidArgumentException($message);
            }
          }
        }

        foreach ($this->request->getPost("idAdapter") as $key) {
          $adapter = new Maxadapter();
          $adapter->idAdapter = $key;
          $adapter->idMasteraccount = $idMasteraccount;
          if (!$adapter->save()) {
            $this->db->rollback();
            foreach ($adapter->getMessages() as $message) {
              throw new \InvalidArgumentException($message);
            }
          }
        }

        $this->db->commit();
        $this->notification->info("La cuenta maestra se actualizo correctamente");
        $this->trace("success", "Se edito la clasificación de cuenta: {$masteraccount->idMasteraccount}/{$masteraccount->name}");
        return $this->response->redirect('masteraccount/show/' . $idMasteraccount);
      } catch (InvalidArgumentException $e) {
        $this->notification->error($e->getMessage());
//        $this->trace("success", "Se edito la clasificación de cuenta: {$masteraccount->idMasteraccount}/{$masteraccount->name}");
      } catch (Exception $e) {
        $this->trace("fail", $e->getTraceAsString());
        $this->logger->log("Exception while creating masteraccount: {$e->getMessage()}");
        $this->logger->log($e->getTraceAsString());
        $this->notification->error("Ocurrió un error, por favor contacte al administrador");
        return $this->response->redirect('masteraccount');
      }
    }
  }

  public function aliasdeleteAction($idAlias) {
    $alias = Allied::findFirst(array(
                'conditions' => 'idAllied = ?1',
                'bind' => array(1 => $idAlias)
    ));
    $config = Alliedconfig::findFirst(array(
                'conditions' => 'idAllied = ?1',
                'bind' => array(1 => $idAlias)
    ));

    if (!$alias or ! $config) {
      $this->notification->error("La cuenta aliada que intenta eliminar no existe, por favor verifique la información.");
      $this->trace('fail', "El alias no existe: {$idAlias}");
      return $this->response->redirect("masteraccount/aliaslist/{$alias->idMasteraccount}");
    }
    try {

      $this->db->begin();
      if (!$config->delete()) {
        $this->db->rollback();
        foreach ($config->getMessages() as $msg) {
          throw new Exception("Ha ocurrido un error, por favor contacte a el administrador.");
          $this->logger->log("Error while deleting alliedconfig: {$msg}");
        }
        return $this->response->redirect("masteraccount/aliaslist/{$alias->idMasteraccount}");
      } else {
        if (!$alias->delete()) {
          $this->db->rollback();
          foreach ($alias->getMessages() as $msg) {
            throw new Exception("Ha ocurrido un error, por favor contacte a el administrador.");
            $this->logger->log("Error while deleting allied: {$msg}");
          }
        } else {
          $this->db->commit();
          $this->notification->warning("Se ha eliminado la cuenta aliada <strong>{$alias->name}</strong> exitosamente");
          $this->trace('success', "Se elimino la cuenta aliada: {$idAlias}");
          return $this->response->redirect("masteraccount/aliaslist/{$alias->idMasteraccount}");
        }
      }
    } catch (Exception $e) {
      $this->notification->error($e->getMessage());
    }
  }

  public function getallmtaAction() {
    try {
      $builder = Mta::find();
      $array = array();
      foreach ($builder as $value => $key) {
        $array[$value] = $key;
      }
      return $this->set_json_response($array, 200, "OK");
    } catch (Exception $e) {
      $this->logger->log($e->getTraceAsString());
      $this->notification->error("Ocurrió un error, por favor contacte al administrador");
    }
  }

  public function adapterAction() {
    try {
      $builder = Adapter::find();
      $array = array();
      foreach ($builder as $value => $key) {
        $array[$value] = $key;
      }
      return $this->set_json_response($array, 200, "OK");
    } catch (Exception $e) {
      $this->logger->log($e->getTraceAsString());
      $this->notification->error("Ocurrió un error, por favor contacte al administrador");
    }
  }

  public function urldomainAction() {
    try {
      $builder = Urldomain::find();
      $array = array();
      foreach ($builder as $value => $key) {
        $array[$value] = $key;
      }
      return $this->set_json_response($array, 200, "OK");
    } catch (Exception $e) {
      $this->logger->log($e->getTraceAsString());
      $this->notification->error("Ocurrió un error, por favor contacte al administrador");
    }
  }

  public function mailclassAction() {
    try {
      $builder = Mailclass::find();
      $array = array();
      foreach ($builder as $value => $key) {
        $array[$value] = $key;
      }
      return $this->set_json_response($array, 200, "OK");
    } catch (Exception $e) {
      $this->logger->log($e->getTraceAsString());
      $this->notification->error("Ocurrió un error, por favor contacte al administrador");
    }
  }

  public function showAction($idMasteraccount) {
    if (!$idMasteraccount) {
      $this->notification->error('No se ha podido ingresar verifique la información enviada');
      return $this->response->redirect('masteraccount');
    }
    $masteraccount = Masteraccount::findfirst([
                'idMasteraccount = ?0',
                'bind' => [$idMasteraccount]
    ]);

    if (!$masteraccount) {
      $this->notification->error('La cuenta maestra no existe');
      return $this->response->redirect('masteraccount');
    }

    $masterConfig = MasterConfig::findfirst([
                'idMasteraccount = ?0',
                'bind' => [$idMasteraccount]
    ]);

    $detailConfig = DetailConfig::find([
                'idMasterConfig = ?0',
                'bind' => [$masterConfig->idMasterConfig]
    ]);

    $idAllieds = "";
    foreach ($masteraccount->Allied as $value) {
      $idAllieds .= $value->idAllied . ",";
    }

    $idAllieds = trim($idAllieds, ",");

    $phql = "SELECT SUM(Alliedconfig.diskSpace) cnt FROM Alliedconfig WHERE Alliedconfig.idAllied IN (:idAllieds:)";
    $result = $this->modelsManager->executeQuery($phql, array('idAllieds' => $idAllieds));

    for ($i = 0; $i < count($detailConfig); $i++) {
      if ((int) substr($detailConfig[$i]->pricelist->price, -2) == 0) {
        $priceSetted[$i] = (int) $detailConfig[$i]->pricelist->price;
      } else {
        $priceSetted[$i] = $detailConfig[$i]->pricelist->price;
      }
    }

    $this->view->setVar("config", $masterConfig);
    $this->view->setVar("space", $result->getFirst()->cnt);
    $this->view->setVar("detailConfig", $detailConfig);
    $this->view->setVar("priceSetted", $priceSetted);
    $this->view->setVar("masteraccount", $masteraccount);
  }

  public function createconfigAction($idMasteraccount) {
    if (!$idMasteraccount) {
      $this->notification->error('No se ha podido ingresar verifique la información enviada');
      return $this->response->redirect('masteraccount');
    }
    $masteraccount = Masteraccount::findfirst([
                'idMasteraccount = ?0',
                'bind' => [$idMasteraccount]
    ]);
    if (!$masteraccount) {
      $this->notification->error('La cuenta maestra que desea configurar no existe, por favor valide la información');
      return $this->response->redirect('masteraccount');
    }
    $configForm = new ConfigForm();
    $this->view->setVar('configForm', $configForm);
    $this->view->setVar("masteraccount", $masteraccount);
    if ($this->request->isPost()) {
      try {
        $config = new Config();
        $config->idMasteraccount = $idMasteraccount;

        $configForm->bind($this->request->getPost(), $config);
        if (!$configForm->isValid()) {
          foreach ($configForm->getMessages() as $msg) {
            throw new \InvalidArgumentException($msg);
          }
        }

        $this->db->begin();
        $expiryDate = strtotime($this->request->getPost('expiryDate'));
        if ($expiryDate < time()) {
          throw new InvalidArgumentException("La fecha de expedicion no puede ser inferior a la fecha acual");
        }
//        var_dump($masteraccount->mxs);
//        var_dump($this->request->getPost());
        if (!$config->save()) {
          $this->db->rollback();
          foreach ($config->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
        foreach ($masteraccount->mxs as $key) {
          if ($key->idServices == $this->services->email_marketing) {
            foreach ($this->request->getPost("idMta") as $key) {
              $mta = new Maxmta();
              $mta->idMta = $key;
              $mta->idMasteraccount = $idMasteraccount;
              if (!$mta->save()) {
                $this->db->rollback();
                foreach ($mta->getMessages() as $message) {
                  throw new \InvalidArgumentException($message);
                }
              }
            }
            foreach ($this->request->getPost("idUrldomain") as $key) {
              $urldomain = new Maxurldomain();
              $urldomain->idUrldomain = $key;
              $urldomain->idMasteraccount = $idMasteraccount;
              if (!$urldomain->save()) {
                $this->db->rollback();
                foreach ($urldomain->getMessages() as $message) {
                  throw new \InvalidArgumentException($message);
                }
              }
            }
            foreach ($this->request->getPost("idMailClass") as $key) {
              $mailclass = new Maxmailclass();
              $mailclass->idMailClass = $key;
              $mailclass->idMasteraccount = $idMasteraccount;
              if (!$mailclass->save()) {
                $this->db->rollback();
                foreach ($mailclass->getMessages() as $message) {
                  throw new \InvalidArgumentException($message);
                }
              }
            }
            foreach ($this->request->getPost("idAdapter") as $key) {
              $adapter = new Maxadapter();
              $adapter->idAdapter = $key;
              $adapter->idMasteraccount = $idMasteraccount;
              if (!$adapter->save()) {
                $this->db->rollback();
                foreach ($adapter->getMessages() as $message) {
                  throw new \InvalidArgumentException($message);
                }
              }
            }
          }
        }
        $this->db->commit();

        $this->notification->info("La cuenta maestra se actualizo correctamente");
        $this->trace("success", "Se edito la clasificación de cuenta: {$masteraccount->idMasteraccount}/{$masteraccount->name}");
        return $this->response->redirect('masteraccount/show/' . $idMasteraccount);
      } catch (InvalidArgumentException $e) {
        $this->notification->error($e->getMessage());
        $this->trace("success", "Se edito la clasificación de cuenta: {$masteraccount->idMasteraccount}/{$masteraccount->name}");
      } catch (Exception $e) {
        $this->trace("fail", $e->getTraceAsString());
        $this->logger->log("Exception while creating masteraccount: {$e->getMessage()}");
        $this->logger->log($e->getTraceAsString());
        $this->notification->error("Ocurrió un error, por favor contacte al administrador");
        return $this->response->redirect('masteraccount');
      }
    }
  }

  public function createuserAction($idMasteraccount) {
    if (!$idMasteraccount) {
      $this->notification->error('No se ha podido ingresar verifique la información enviada');
      return $this->response->redirect('masteraccount');
    }
    $userForm = new UserForm();
    $masteraccount = Masteraccount::findFirst([
                'idMasteraccount = ?0',
                'bind' => [$idMasteraccount]
    ]);

    $this->view->setVar("UserForm", $userForm);
    $this->view->setVar("idMasteraccount", $idMasteraccount);
    $this->view->setVar("masteraccount", $masteraccount);
    if ($this->request->isPost()) {
      $userManager = new \Sigmamovil\General\Misc\UserManager();
      try {
//        var_dump($this->request->getPost());

        $user = $userManager->createMasterUserByMasteraccount($this->request->getPost(), $idMasteraccount);

        $this->notification->success('Se ha creado el usuario exitosamente en la cuenta maestra ');
        $this->trace("success", "Se creo un usuario con ID: {$user->idUser}");
        return $this->response->redirect("masteraccount/aliaslistuser/" . $idMasteraccount);
      } catch (InvalidArgumentException $msg) {
        $this->notification->error($msg->getMessage());
      } catch (Exception $exc) {
        echo $exc->getTraceAsString();
      }
    }
  }

  public function planbycountryAction($idCounty) {
    try {
      $paymentPlan = PaymentPlan::find(array(
                  "conditions" => "idMasteraccount is null AND idAllied is null AND idCountry = ?0",
                  "bind" => array(0 => $idCounty)
      ));

      $arr = array();
      foreach ($paymentPlan as $key => $value) {
        $arrServ = array();
        $arr[$key] = array("idPaymentPlan" => $value->idPaymentPlan, "name" => $value->name, "diskSpace" => $value->diskSpace);
        foreach ($value->PaymentPlanxservice as $index => $services) {
          $arrServ[$index]['service'] = $services->Services->name;
          $arrServ[$index]['amount'] = $services->amount;
          $arrServ[$index]['accountingMode'] = $services->accountingMode;
        }
        $arr[$key]['planxservice'] = $arrServ;
      }

      return $this->set_json_response($arr, 200, "OK");
    } catch (Exception $ex) {
      $this->notification->error($ex->getMessage());
    }
  }

  public function planbycountryalliedAction($idMasteraccount, $idCounty) {
    try {
      $paymentPlan = PaymentPlan::find(array(
                  "conditions" => "idMasteraccount = ?0 AND idAllied is null AND idCountry = ?1",
                  "bind" => array(0 => $idMasteraccount, 1 => $idCounty)
      ));

      $masterConfig = MasterConfig::findFirst(array(
                  "conditions" => "idMasteraccount = ?0",
                  "bind" => [0 => $idMasteraccount]
      ));

      $arr = array();
      foreach ($paymentPlan as $key => $value) {
        $arrServ = array();
        $arr[$key] = array("idPaymentPlan" => $value->idPaymentPlan, "name" => $value->name,
            "diskSpace" => $value->diskSpace);
        foreach ($masterConfig->DetailConfig as $detailConfig) {
          foreach ($value->PaymentPlanxservice as $index => $services) {
            if ($detailConfig->idServices == $services->idServices) {
              $arrServ[$index]['amountConfig'] = $detailConfig->amount;
              $arrServ[$index]['totalAmount'] = $detailConfig->amount - $services->amount;
              $arrServ[$index]['service'] = $services->Services->name;
              $arrServ[$index]['amount'] = $services->amount;
              $arrServ[$index]['accountingMode'] = $services->accountingMode;
            }
          }
        }
        $arr[$key]['planxservice'] = $arrServ;
      }

      return $this->set_json_response($arr, 200, "OK");
    } catch (Exception $ex) {
      $this->notification->error($ex->getMessage());
    }
  }

  public function createConfigAllied($idAlliedconfig, $paymentPlanxService, $key) {
    $this->detailConfigAllied = new DetailConfig();

    $this->detailConfigAllied->idAlliedconfig = $idAlliedconfig;
    $this->detailConfigAllied->idPlanType = $paymentPlanxService[$key]->idPlanType;
    $this->detailConfigAllied->idServices = $paymentPlanxService[$key]->idServices;
    $this->detailConfigAllied->idPriceList = $paymentPlanxService[$key]->idPriceList;
    $this->detailConfigAllied->status = $paymentPlanxService[$key]->status;
    $this->detailConfigAllied->amount = $paymentPlanxService[$key]->amount;
    $this->detailConfigAllied->totalAmount = $paymentPlanxService[$key]->amount;
    $this->detailConfigAllied->speed = $paymentPlanxService[$key]->speed;
    $this->detailConfigAllied->accountingMode = $paymentPlanxService[$key]->accountingMode;

    if (!$this->detailConfigAllied->save()) {
      foreach ($this->detailConfigAllied->getMessages() as $message) {
        throw new \InvalidArgumentException($message);
      }
    }

    $ppxsxmta = Ppxsxmta::find(array(
                "conditions" => "idPaymentPlanxService = ?0",
                "bind" => [0 => $paymentPlanxService[$key]->idPaymentPlanxService]
    ));

    if (count($ppxsxmta) > 0) {
      foreach ($ppxsxmta as $ppxsxmtaValue) {
        $dcxmta = new Dcxmta();
        $dcxmta->idDetailConfig = $this->detailConfigAllied->idDetailConfig;
        $dcxmta->idMta = $ppxsxmtaValue->idMta;

        if (!$dcxmta->save()) {
          foreach ($dcxmta->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      }
    }

    $ppxsxadapter = Ppxsxadapter::find(array(
                "conditions" => "idPaymentPlanxService = ?0",
                "bind" => [0 => $paymentPlanxService[$key]->idPaymentPlanxService]
    ));


    if (count($ppxsxadapter) > 0) {
      foreach ($ppxsxadapter as $ppxsxadapterValue) {
        $dcxadapter = new Dcxadapter();
        $dcxadapter->idDetailConfig = $this->detailConfigAllied->idDetailConfig;
        $dcxadapter->idAdapter = $ppxsxadapterValue->idAdapter;

        if (!$dcxadapter->save()) {
          foreach ($dcxadapter->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      }
    }

    $ppxsxmailClass = PpxsxmailClass::find(array(
                "conditions" => "idPaymentPlanxService = ?0",
                "bind" => [0 => $paymentPlanxService[$key]->idPaymentPlanxService]
    ));

    if (count($ppxsxmailClass) > 0) {
      foreach ($ppxsxmailClass as $ppxsxmailClassValue) {
        $dcxmailClass = new Dcxmailclass();
        $dcxmailClass->idDetailConfig = $this->detailConfigAllied->idDetailConfig;
        $dcxmailClass->idMailClass = $ppxsxmailClassValue->idMailClass;

        if (!$dcxmailClass->save()) {
          foreach ($dcxmailClass->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      }
    }

    $ppxsxurldomain = Ppxsxurldomain::find(array(
                "conditions" => "idPaymentPlanxService = ?0",
                "bind" => [0 => $paymentPlanxService[$key]->idPaymentPlanxService]
    ));

    if (count($ppxsxurldomain) > 0) {
      foreach ($ppxsxurldomain as $ppxsxurldomainValue) {
        $dcxurldomain = new Dcxurldomain();
        $dcxurldomain->idDetailConfig = $this->detailConfigAllied->idDetailConfig;
        $dcxurldomain->idUrldomain = $ppxsxurldomainValue->idUrldomain;

        if (!$dcxurldomain->save()) {
          foreach ($dcxurldomain->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      }
    }
  }

  public function createOnePlan($paymentPlanxService, $configMaster, $alliedConfig) {

    if ($paymentPlanxService[0]->Services->name == "Sms" && $configMaster->Services->name == "Sms") {
      if ($paymentPlanxService[0]->amount <= $configMaster->amount && $paymentPlanxService[0]->PaymentPlan->diskSpace <= $configMaster->MasterConfig->diskSpace) {

        $this->createConfigAllied($alliedConfig->idAlliedconfig, $paymentPlanxService, 0);
        $configMaster->amount = $configMaster->amount - $paymentPlanxService[0]->amount;

        if (!$configMaster->save()) {
          foreach ($alliedConfig->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      } else {
        throw new InvalidArgumentException("Ha ocurrido un error, la cuenta no tiene la suficiente capacidad para asignar el plan elegido");
      }
    } else if ($paymentPlanxService[0]->Services->name == "SMS doble-via" && $configMaster->Services->name == "SMS doble-via") {
      if ($paymentPlanxService[0]->amount <= $configMaster->amount && $paymentPlanxService[0]->PaymentPlan->diskSpace <= $configMaster->MasterConfig->diskSpace) {

        $this->createConfigAllied($alliedConfig->idAlliedconfig, $paymentPlanxService, 0);
        $configMaster->amount = $configMaster->amount - $paymentPlanxService[0]->amount;

        if (!$configMaster->save()) {
          foreach ($alliedConfig->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      } else {
        throw new InvalidArgumentException("Ha ocurrido un error, la cuenta no tiene la suficiente capacidad para asignar el plan elegido");
      }
    } else if ($paymentPlanxService[0]->Services->name == "Landing Page" && $configMaster->Services->name == "Landing Page") {
      if ($paymentPlanxService[0]->amount <= $configMaster->amount && $paymentPlanxService[0]->PaymentPlan->diskSpace <= $configMaster->MasterConfig->diskSpace) {

        $this->createConfigAllied($alliedConfig->idAlliedconfig, $paymentPlanxService, 0);
        $configMaster->amount = $configMaster->amount - $paymentPlanxService[0]->amount;

        if (!$configMaster->save()) {
          foreach ($alliedConfig->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      } else {
        throw new InvalidArgumentException("Ha ocurrido un error, la cuenta no tiene la suficiente capacidad para asignar el plan elegido");
      }
    } else if ($paymentPlanxService[0]->Services->name == "Email Marketing" && $configMaster->Services->name == "Email Marketing") {
      if ($paymentPlanxService[0]->amount <= $configMaster->amount && $paymentPlanxService[0]->PaymentPlan->diskSpace <= $configMaster->MasterConfig->diskSpace && $paymentPlanxService[0]->accountingMode == $configMaster->accountingMode) {

        $this->createConfigAllied($alliedConfig->idAlliedconfig, $paymentPlanxService, 0);
        $configMaster->amount = $configMaster->amount - $paymentPlanxService[0]->amount;

        if (!$configMaster->save()) {
          foreach ($alliedConfig->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      } else {
        throw new InvalidArgumentException("Ha ocurrido un error, la cuenta no tiene la suficiente capacidad para asignar el plan elegido");
      }
    } /* else {
      throw new InvalidArgumentException("Ha ocurrido un error, la cuenta no tiene la suficiente capacidad para asignar el plan elegido");
      } */
  }

  public function selectTwoPlan($paymentPlanxService, $key, $configMaster, $alliedConfig) {
    if ($paymentPlanxService[$key]->Services->name == "Sms") {
      if ($paymentPlanxService[$key]->amount <= $configMaster->amount && $paymentPlanxService[$key]->PaymentPlan->diskSpace <= $configMaster->MasterConfig->diskSpace) {

        $this->createConfigAllied($alliedConfig->idAlliedconfig, $paymentPlanxService, $key);
        $configMaster->amount = $configMaster->amount - $paymentPlanxService[$key]->amount;

        if (!$configMaster->save()) {
          foreach ($configMaster->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      } else {
        throw new InvalidArgumentException("Ha ocurrido un error, la cuenta no tiene la suficiente capacidad para asignar el plan elegido");
      }
    } else if ($paymentPlanxService[$key]->Services->name == "SMS doble-via") {
      if ($paymentPlanxService[$key]->amount <= $configMaster->amount && $paymentPlanxService[$key]->PaymentPlan->diskSpace <= $configMaster->MasterConfig->diskSpace) {

        $this->createConfigAllied($alliedConfig->idAlliedconfig, $paymentPlanxService, $key);
        $configMaster->amount = $configMaster->amount - $paymentPlanxService[$key]->amount;

        if (!$configMaster->save()) {
          foreach ($configMaster->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      } else {
        throw new InvalidArgumentException("Ha ocurrido un error, la cuenta no tiene la suficiente capacidad para asignar el plan elegido");
      }
    } else if ($paymentPlanxService[$key]->Services->name == "Landing Page") {
      if ($paymentPlanxService[$key]->amount <= $configMaster->amount && $paymentPlanxService[$key]->PaymentPlan->diskSpace <= $configMaster->MasterConfig->diskSpace) {

        $this->createConfigAllied($alliedConfig->idAlliedconfig, $paymentPlanxService, $key);
        $configMaster->amount = $configMaster->amount - $paymentPlanxService[$key]->amount;

        if (!$configMaster->save()) {
          foreach ($configMaster->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      } else {
        throw new InvalidArgumentException("Ha ocurrido un error, la cuenta no tiene la suficiente capacidad para asignar el plan elegido");
      }
    } else if ($paymentPlanxService[$key]->Services->name == "Email Marketing") {
      if ($paymentPlanxService[$key]->amount <= $configMaster->amount && $paymentPlanxService[$key]->PaymentPlan->diskSpace <= $configMaster->MasterConfig->diskSpace && $paymentPlanxService[$key]->accountingMode == $configMaster->accountingMode) {
        $this->createConfigAllied($alliedConfig->idAlliedconfig, $paymentPlanxService, $key);
        $configMaster->amount = $configMaster->amount - $paymentPlanxService[$key]->amount;

        if (!$configMaster->save()) {
          foreach ($configMaster->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      } else {
        throw new InvalidArgumentException("Ha ocurrido un error, la cuenta no tiene la suficiente capacidad para asignar el plan elegido");
      }
    } /* else {
      throw new InvalidArgumentException("Ha ocurrido un error, la cuenta no tiene la suficiente capacidad para asignar el plan elegido");
      } */
  }

  public function setCustomizing($masteraccount) {

    $masteraccounttheme = new Masteraccounttheme();
    $masteraccounttheme->idMasteraccount = $masteraccount->idMasteraccount;
    $masteraccounttheme->title = 'Index';
    $masteraccounttheme->mainTittle = 'Logo de empresa';
    $masteraccounttheme->mainColor = '#ff6e00';
    $masteraccounttheme->linkColor = '#00bede';
    $masteraccounttheme->linkHoverColor = '#ff6e00';
    $masteraccounttheme->headerTextColor = '#777777';
    $masteraccounttheme->headerColor = '#fff';
    $masteraccounttheme->footerColor = '#ddd';
    $masteraccounttheme->footerIconColor = '#777777';
    $masteraccounttheme->userBoxColor = '#ddd';
    $masteraccounttheme->userBoxHoverColor = '#eeeeee';
    $masteraccounttheme->deleted = 0;

    if (!$masteraccounttheme->save()) {
      $this->db->rollback();
      foreach ($masteraccounttheme->getMessages() as $message) {
        throw new \InvalidArgumentException($message);
      }
    }

    $footersocialblock = new FooterSocialBlock();
    $footersocialblock->idMasterAccountTheme = $masteraccounttheme->idMasterAccountTheme;
    $footersocialblock->align = 'rigth';
    $footersocialblock->deleted = 0;
    if (!$footersocialblock->save()) {
      $this->db->rollback();
      foreach ($footersocialblock->getMessages() as $message) {
        throw new \InvalidArgumentException($message);
      }
    }

    $footertextblock = new FooterTextBlock();
    $footertextblock->idMasterAccountTheme = $masteraccounttheme->idMasterAccountTheme;
    $footertextblock->align = 'left';
    $footertextblock->deleted = 0;
    if (!$footertextblock->save()) {
      $this->db->rollback();
      foreach ($footertextblock->getMessages() as $message) {
        throw new \InvalidArgumentException($message);
      }
    }
  }

  private function createAccountCategory($idMasteraccount = null, $idAllied = null, $name, $expirationDate) {
    $accountCategory = new \AccountCategory();
    $accountCategory->idMasteraccount = $idMasteraccount;
    $accountCategory->idAllied = $idAllied;
    $accountCategory->name = $name;
    $accountCategory->deleted = 0;
    $accountCategory->status = 1;
    $accountCategory->expirationDate = $expirationDate;
    $accountCategory->description = "Sin descripción";

    if (!$accountCategory->save()) {
      foreach ($accountCategory->getMessages() as $message) {
        $this->db->rollback();
        throw new \InvalidArgumentException($message);
      }
    }
    return true;
  }

  private function saveSmsSendingRule($array, $idMasteraccount) {
    if (!is_array($array)) {
      $this->db->rollback();
      throw new InvalidArgumentException("Las reglas deben estar en un arreglo");
    }

    foreach ($array as $rule) {
      $mxssr = new Mxssr();
      $mxssr->idMasteraccount = $idMasteraccount;
      $mxssr->idSmsSendingRule = $rule;

      if (!$mxssr->save()) {
        $this->db->rollback();
        foreach ($mxssr->getMessages() as $message) {
          throw new \InvalidArgumentException($message);
        }
      }
      unset($mxssr);
    }
  }

  public function listmxssrAction($idMasteraccount) {
    $this->view->disable();
    $mxssr = Mxssr::find(array(
                "conditions" => "idMasteraccount = ?0",
                "bind" => array($idMasteraccount)
    ));

    $data = [];
    if ($mxssr > 0) {
      foreach ($mxssr as $key => $value) {
        $data[$key] = array(
            "idSmsSendingRule" => $value->SmsSendingRule->idSmsSendingRule,
            "name" => $value->SmsSendingRule->name
        );
      }
    }

    return $this->set_json_response($data);
  }

  public function getmasteraccountAction($idMasterAccount) {
    $this->view->disable();
    $masteraccount = Masteraccount::findFirst(array(
                "conditions" => "idMasteraccount = ?0",
                "bind" => array($idMasterAccount)
    ));

    $data = [];
    if ($masteraccount) {
      $data = array(
          "idMasteraccount" => $masteraccount->idMasteraccount,
          "name" => $masteraccount->name,
          "description" => $masteraccount->description,
          "nit" => $masteraccount->nit,
          "address" => $masteraccount->address,
          "phone" => $masteraccount->phone,
          "status" => $masteraccount->status
      );
    }

    return $this->set_json_response($data);
  }

  public function deleteSmsSendingRules($idMasterAccount) {
    $rules = Mxssr::find(array(
                "conditions" => "idMasteraccount = ?0",
                "bind" => array($idMasterAccount)
    ));

    if (count($rules) > 0) {
      foreach ($rules as $rule) {
        if ($rule->delete()) {
          foreach ($rule->getMessages() as $message) {
            throw new \InvalidArgumentException($message);
          }
        }
      }
    }

    return true;
  }

  public function getservicesalliedAction($idAllied) {
    try {
      $allied = Allied::findFirst(array(
                  'conditions' => 'idAllied = ?1',
                  'bind' => array(1 => $idAllied)
      ));

      if (!$allied) {
        throw new InvalidArgumentException("La cuenta enviada no existe, por favor verifique la información");
      }

      $detailConfig = $allied->AlliedConfig->DetailConfig;

      $arr = array();

      foreach ($detailConfig as $key => $ser) {
        $arr[$key]['idServices'] = $ser->idServices;
        $arr[$key]['name'] = $ser->Services->name;
//        $this->logger->log("Este es un servicio {$ser->Services->name}");
        if ($ser->idServices == $this->services->sms) {
          $limitSms = $ser->amount;
        } else if ($ser->idServices == $this->services->email_marketing) {
          $limitContact = $ser->amount;
          $accountingMode = $ser->accountingMode;
        } else if ($ser->idServices == $this->services->sms_two_way) {
          $limitSmstwoway = $ser->amount;
        } else if ($ser->idServices == $this->services->landing_page) {
          $limitLandingpage = $ser->amount;
        }
      }

      $result = [
          'services' => $arr,
          'limitSmsAllied' => isset($limitSms) ? $limitSms : '',
          'limitSmstwowayAllied' => isset($limitSmstwoway) ? $limitSmstwoway : '',
          'limitContactAllied' => isset($limitContact) ? $limitContact : '',
          'accountingModeAllied' => isset($accountingMode) ? $accountingMode : '',
          'limitLandingpageAllied' => isset($limitLandingpage) ? $limitLandingpage : ''
      ];

      return $this->set_json_response($result, 200, "OK");
    } catch (Exception $ex) {
      $this->logger->log("Exception while in account: {$ex->getMessage()}");
      $this->logger->log($ex->getTraceAsString());
      $this->notification->error($ex->getMessage());
    }
  }

  public function rechargealliedAction() {
    $dataJson = $this->request->getRawBody();
    $data = json_decode($dataJson, true);

    if (!empty($data)) {
      try {
        $allied = Allied::findfirst(array(
                    "conditions" => "idAllied = ?0",
                    "bind" => [0 => $data['idAllied']]
        ));

        if (!$allied) {
          throw new InvalidArgumentException("La cuenta enviada no existe, por favor verifique la información");
        }
        $detailConfigAllied = $allied->AlliedConfig->DetailConfig;

        $this->db->begin();

        foreach ($detailConfigAllied as $value) {
          if ($value->idServices == $this->services->sms) {
            if (isset($data['smsLimit'])) {
              $totalAmount = $value->totalAmount;
              $value->totalAmount = $value->totalAmount + $data['smsLimit'];
              $value->amount = $value->amount + $data['smsLimit'];
              if (!$value->save()) {
                foreach ($value->getMessages() as $msg) {
                  throw new Exception($msg);
                }
              }
              $this->createRechageHistory(null, $data['smsLimit'], $totalAmount, $value->idServices, $value->idAlliedconfig, null);
            }
          } else if ($value->idServices == $this->services->sms_two_way) {
            if (isset($data['smstwowayLimit'])) {
              $totalAmount = $value->totalAmount;
              $value->totalAmount = $value->totalAmount + $data['smstwowayLimit'];
              $value->amount = $value->amount + $data['smstwowayLimit'];
              if (!$value->save()) {
                foreach ($value->getMessages() as $msg) {
                  throw new Exception($msg);
                }
              }
              $this->createRechageHistory(null, $data['smstwowayLimit'], $totalAmount, $value->idServices, $value->idAlliedconfig, null);
            }
          } else if ($value->idServices == $this->services->email_marketing) {
            if (isset($data['mailLimit'])) {
              $totalAmount = $value->totalAmount;
              $value->totalAmount = $value->totalAmount + $data['mailLimit'];
              $value->amount = $value->amount + $data['mailLimit'];
              if (!$value->save()) {
                foreach ($value->getMessages() as $msg) {
                  throw new Exception($msg);
                }
              }
              $this->createRechageHistory(null, $data['mailLimit'], $totalAmount, $value->idServices, $value->idAlliedconfig, null);
            }
          } else if ($value->idServices == $this->services->landing_page) {
            if (isset($data['landingpageLimit'])) {
              $totalAmount = $value->totalAmount;
              $value->totalAmount = $value->totalAmount + $data['landingpageLimit'];
              $value->amount = $value->amount + $data['landingpageLimit'];
              if (!$value->save()) {
                foreach ($value->getMessages() as $msg) {
                  throw new Exception($msg);
                }
              }
              $this->createRechageHistory(null, $data['landingpageLimit'], $totalAmount, $value->idServices, $value->idAlliedconfig, null);
            }
          }
        }

        $detailConfigMaster = DetailConfig::find(array(
                    "conditions" => "idMasterConfig = ?0",
                    "bind" => [0 => $this->user->Usertype->Masteraccount->MasterConfig->idMasterConfig]
        ));

        foreach ($detailConfigMaster as $value) {
          if ($value->idServices == $this->services->sms) {
            if (isset($data['smsLimit'])) {
              $value->amount = $value->amount - $data['smsLimit'];
              if (!$value->save()) {
                foreach ($value->getMessages() as $msg) {
                  throw new Exception($msg);
                }
              }
            }
          } else if ($value->idServices == $this->services->sms_two_way) {
            if (isset($data['smstwowayLimit'])) {
              $value->amount = $value->amount - $data['smstwowayLimit'];
              if (!$value->save()) {
                foreach ($value->getMessages() as $msg) {
                  throw new Exception($msg);
                }
              }
            }
          } else if ($value->idServices == $this->services->email_marketing) {
            if (isset($data['mailLimit'])) {
              $value->amount = $value->amount - $data['mailLimit'];
              if (!$value->save()) {
                foreach ($value->getMessages() as $msg) {
                  throw new Exception($msg);
                }
              }
            }
          } else if ($value->idServices == $this->services->landing_page) {
            if (isset($data['landingpageLimit'])) {
              $value->amount = $value->amount - $data['landingpageLimit'];
              if (!$value->save()) {
                foreach ($value->getMessages() as $msg) {
                  throw new Exception($msg);
                }
              }
            }
          }
        }

        /* $sql = "CALL updateCountersGlobal()";
          $this->db->execute($sql);
          $sql1 = "CALL updateCountersAccount({$data['idAccount']})";
          $this->db->fetchAll($sql1);
          $sql = "CALL updateAmountAccount({$data['idAccount']},{$this->services->sms})";
          $this->db->execute($sql); */

        $this->db->commit();
        return $this->set_json_response(array("Se recargaron los servicios correctamente"), 200, 'success');
      } catch (InvalidArgumentException $msg) {
        $this->db->rollback();
        return $this->set_json_response(array($msg->getMessage()), 401, 'error');
      } catch (Exception $e) {
        $this->db->rollback();
        $this->logger->log("Exception while charging account: {$e->getMessage()}");
        $this->logger->log($e->getTraceAsString());
        return $this->set_json_response(array("Ocurrió un error, por favor contacte al administrador"), 500, 'error');
      }
    }
  }

}
