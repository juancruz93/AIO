/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(1);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9hbmd1bGFyL3Ntcy9tYWluLmpzPzVhMWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUJBQU8sQ0FBQyxDQUFpQiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9jb250cm9sbGVyLmpzJyk7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vanMvYW5ndWxhci9zbXMvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("angular.module('aio', ['platanus.keepValues', 'ui.select', 'ngSanitize', 'ngMaterial', 'ngAnimate', 'moment-picker', 'angularMoment'])\r\n        .filter('propsFilter', function () {\r\n          return function (items, props) {\r\n            var out = [];\r\n            if (angular.isArray(items)) {\r\n              var keys = Object.keys(props);\r\n              items.forEach(function (item) {\r\n                var itemMatches = false;\r\n                for (var i = 0; i < keys.length; i++) {\r\n                  var prop = keys[i];\r\n                  var text = props[prop].toLowerCase();\r\n                  if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {\r\n                    itemMatches = true;\r\n                    break;\r\n                  }\r\n                }\r\n\r\n                if (itemMatches) {\r\n                  out.push(item);\r\n                }\r\n              });\r\n            } else {\r\n              // Let the output be the input untouched\r\n              out = items;\r\n            }\r\n\r\n            return out;\r\n          };\r\n        })\r\n        .filter('split', function () {\r\n          return function (input, splitChar) {\r\n            // do some bounds checking here to ensure it has that index\r\n            return input.split(splitChar);\r\n          }\r\n        })\r\n        .directive('statusSms', function ($compile) {\r\n          return{\r\n            scope: {statusSms: '@'},\r\n            restrict: 'A',\r\n            link: function (scope, element, attr) {\r\n              var template = \"Estado: <span class='{{classStatus}}'>{{tralateSms}}<span>\";\r\n              scope.chaneStatus = function () {\r\n                switch (scope.statusSms) {\r\n                  case 'draft':\r\n                    scope.classStatus = 'color-draft';\r\n                    scope.tralateSms = \"Borrador\";\r\n                    break;\r\n                  case 'scheduled':\r\n                    scope.classStatus = 'color-scheduled';\r\n                    scope.tralateSms = \"Programado\";\r\n                    break;\r\n                  case 'pending':\r\n                    scope.classStatus = 'color-pending';\r\n                    scope.tralateSms = \"Pendiente\";\r\n                    break;\r\n                  case 'sending':\r\n                    scope.classStatus = 'color-sending';\r\n                    scope.tralateSms = \"En proceso de envío\";\r\n                    break;\r\n                  case 'sent':\r\n                    scope.classStatus = 'color-sent';\r\n                    scope.tralateSms = \"Enviado\";\r\n                    break;\r\n                  case 'paused':\r\n                    scope.classStatus = 'color-paused';\r\n                    scope.tralateSms = \"Pausado\";\r\n                    break;\r\n                  case 'canceled':\r\n                    scope.classStatus = 'color-canceled';\r\n                    scope.tralateSms = \"Cancelado\";\r\n                    break;\r\n                  case 'undelivered':\r\n                    scope.classStatus = 'color-canceled';\r\n                    scope.tralateSms = \"No enviado\";\r\n                    break;\r\n                  default:\r\n                    break;\r\n                }\r\n              }\r\n              scope.$watch('statusSms', function (v) {\r\n                scope.chaneStatus();\r\n                element.html(template);\r\n                $compile(element.contents())(scope);\r\n              });\r\n              scope.chaneStatus();\r\n              element.html(template);\r\n              $compile(element.contents())(scope);\r\n            }\r\n          }\r\n        })\r\n        .directive('typeSms', function ($compile) {\r\n          return{\r\n            restrict: 'A',\r\n            link: function (scope, element, attr) {\r\n              var template = \"Tipo: {{statusType}}\";\r\n              switch (attr.typeSms) {\r\n                case 'contact':\r\n                  scope.statusType = \"Contacto\";\r\n                  break;\r\n                case 'csv':\r\n                  scope.statusType = \"Csv\";\r\n                  break;\r\n                case 'lote':\r\n                  scope.statusType = \"Envío rapido\";\r\n                  break;\r\n                case 'automatic':\r\n                  scope.statusType = \"Contacto\";\r\n                  break;    \r\n                default:\r\n                  scope.statusType = \"Envío rapido\";\r\n                  break;\r\n              }\r\n\r\n              element.html(template);\r\n              $compile(element.contents())(scope);\r\n            }\r\n          }\r\n        })\r\n        .factory('socket', function ($rootScope) {\r\n          return {\r\n            on: function (eventName, callback) {\r\n              socket.on(eventName, function () {\r\n                var args = arguments;\r\n                $rootScope.$apply(function () {\r\n                  callback.apply(socket, args);\r\n                });\r\n              });\r\n            },\r\n            emit: function (eventName, data, callback) {\r\n              socket.emit(eventName, data, function () {\r\n                var args = arguments;\r\n                $rootScope.$apply(function () {\r\n                  if (callback) {\r\n                    callback.apply(socket, args);\r\n                  }\r\n                });\r\n              })\r\n            }\r\n          }\r\n        })\r\n        .factory('main', ['$http', '$window', '$q', 'notificationService', function ($http, $window, $q, notificationService) {\r\n            return {\r\n              getServiceVerified: function () {\r\n                var route = fullUrlBase + '/api/sms/verifysmstwowayservice';\r\n                var defer = $q.defer();\r\n                $http.get(route)\r\n                        .success(function (data) {\r\n                          defer.resolve(data);\r\n                        })\r\n                        .error(function (data) {\r\n                          defer.resolve(data);\r\n                        });\r\n                return defer.promise;\r\n              },\r\n              createLote: function (data, success, error) {\r\n                $http.post('createlote', data).success(success).error(error);\r\n              },\r\n              editLote: function (data, success, error) {\r\n                var route = $window.myBaseURL + \"sms/edit/\";\r\n                $http.post(route + data.idSms, data).success(success).error(error);\r\n              },\r\n              getlisttimezone: function (success, error) {\r\n                var route = $window.myBaseURL + \"mail/timezone/\";\r\n                $http.post(route).success(success).error(error);\r\n              },\r\n              getcontactlist: function (success, error) {\r\n                var route = $window.myBaseURL + \"api/sendmail/getcontactlist\";\r\n                return $http.get(route);\r\n              },\r\n              getsegments: function () {\r\n                var route = $window.myBaseURL + \"api/sendmail/getsegment\";\r\n                return $http.get(route);\r\n              },\r\n              createContact: function (data) {\r\n                return $http.post('createcontact', data);\r\n              },\r\n              validatesmscontact: function (idSms) {\r\n                var route = $window.myBaseURL + \"sms/validatecontact/\" + idSms;\r\n                return $http.post(route, idSms);\r\n\r\n              },\r\n              countContact: function (data) {\r\n                var route = $window.myBaseURL + \"api/sms/countcontact\";\r\n                return $http.post(route, data);\r\n              },\r\n              editContact: function (data) {\r\n                var route = $window.myBaseURL + \"sms/editcontact/\" + data.idSms;\r\n//                console.log(\"error,\",data);\r\n//                return $http.post(route, data);\r\n                var defer = $q.defer();\r\n                $http.post(route, data)\r\n                        .success(function (data) {\r\n                          defer.resolve(data);\r\n                        })\r\n                        .error(function (data) {\r\n                          defer.reject(data);\r\n\r\n                        });\r\n                return defer.promise;\r\n              },\r\n              listfullsmstemplate: function () {\r\n                var route = $window.myBaseURL + \"api/smstemplate/listfull\";\r\n                var defer = $q.defer();\r\n                $http.get(route)\r\n                        .success(function (data) {\r\n                          defer.resolve(data);\r\n                        });\r\n                return defer.promise;\r\n              },\r\n              getDetailSms: function (idSms, page) {\r\n                var route = fullUrlBase + 'api/statics/getdetailsms/' + idSms + \"/\" + page;\r\n                var defer = $q.defer();\r\n                $http.get(route)\r\n                        .success(function (data) {\r\n                          defer.resolve(data);\r\n                        });\r\n                return defer.promise;\r\n              },\r\n              getCategory: function () {\r\n                var route = fullUrlBase + '/api/smscategory/getall';\r\n                var defer = $q.defer();\r\n                $http.get(route)\r\n                        .success(function (data) {\r\n                          defer.resolve(data);\r\n                        });\r\n                return defer.promise;\r\n              },\r\n              getSms: function (page, data) {\r\n                var route = fullUrlBase + '/api/sms/getall/' + page;\r\n                var defer = $q.defer();\r\n                $http.post(route, data)\r\n                        .success(function (data) {\r\n                          defer.resolve(data);\r\n                        })\r\n                        .error(function (data) {\r\n                          defer.reject(data);\r\n                          notificationService.warning(data.message);\r\n                        });\r\n                return defer.promise;\r\n              },\r\n              getOneSms: function (idSms) {\r\n                var route = fullUrlBase + '/api/sms/getone/' + idSms;\r\n                var defer = $q.defer();\r\n                $http.get(route)\r\n                        .success(function (data) {\r\n                          defer.resolve(data);\r\n                        })\r\n                        .error(function (data) {\r\n                          defer.resolve(data);\r\n                        });\r\n                return defer.promise;\r\n              },\r\n              downloadFailedSms: function (data, idSms) {\r\n                var route = fullUrlBase + 'api/sms/downloadreportsmsfailed/' + idSms;\r\n                var defer = $q.defer();\r\n                $http.post(route, data)\r\n                        .success(function (data) {\r\n                          defer.resolve(data);\r\n                        }).error(function (data) {\r\n                  defer.resolve(data);\r\n                });\r\n                return defer.promise;\r\n              },\r\n              deletevarioussmslotes: function (idSms) {\r\n                var route = fullUrlBase + 'api/sms/deletevariouslotes/' + idSms;\r\n                var defer = $q.defer();\r\n                $http.post(route)\r\n                        .success(function (data) {\r\n                          //console.log(data); \r\n                          defer.resolve(data);\r\n                          notificationService.warning(data.message);\r\n                        }).error(function (data) {\r\n                  defer.resolve(data);\r\n                });\r\n                return defer.promise;\r\n              },\r\n              validateBalance: function(){\r\n                  var route = fullUrlBase + 'api/sms/validatebalance';\r\n                  var defer = $q.defer();\r\n                  $http.post(route)\r\n                          .success(function(data){\r\n                              defer.resolve(data);\r\n                              //notificationService.warning(data.message);\r\n                          }).error(function(data){\r\n                              defer.resolve(data);\r\n                          });\r\n                          return defer.promise;\r\n              },\r\n              sendMailNotificationSmsBalance: function(data){\r\n                  var route = fullUrlBase + 'api/sms/sendmailnotsmsbalance';\r\n                  var defer = $q.defer();\r\n                  $http.post(route,data)\r\n                          .success(function(data){\r\n                              defer.resolve(data);\r\n                              //notificationService.warning(data.message);\r\n                          }).error(function(data){\r\n                              defer.resolve(data);\r\n                          });\r\n                          return defer.promise;\r\n              },\r\n              getBalanceSubAccount: function(){\r\n                  var route = fullUrlBase + 'api/sms/getbalancesubaccount';\r\n                  var defer = $q.defer();\r\n                  $http.post(route)\r\n                          .success(function(data){\r\n                              defer.resolve(data);\r\n                              //notificationService.warning(data.message);\r\n                          }).error(function(data){\r\n                              defer.resolve(data);\r\n                          });\r\n                          return defer.promise;\r\n            },\r\n              downloadFailedSmsContact: function (data, idSms) {\r\n                var route = fullUrlBase + 'api/sms/downloadfailedsmscontact/' + idSms;\r\n                console.log(route);\r\n                var defer = $q.defer();\r\n                $http.post(route, data)\r\n                        .success(function (data) {\r\n                          defer.resolve(data);\r\n                        }).error(function (data) {\r\n                  defer.resolve(data);\r\n                });\r\n                return defer.promise;\r\n              }\r\n            }\r\n          }])\r\n        .controller('ctrlSms', ['$rootScope', '$scope', '$http', 'main', '$window', '$timeout', 'socket', 'notificationService', function ($rootScope, $scope, $http, main, $window, $timeout, socket, notificationService) {\r\n            $scope.showButtonTwoway = false;\r\n            $scope.gmt = \"-0500\";\r\n            $scope.initial = 0;\r\n            $scope.page = 1;\r\n            $scope.filter = {};\r\n            $scope.complete = false;\r\n            $scope.misc = {};\r\n            $scope.misc.ProccessCsv = {};\r\n            $scope.typeCsv;\r\n            $scope.targetcsv;\r\n            $scope.morecaracter = false;\r\n            main.getlisttimezone(function (res)\r\n            {\r\n              $scope.timezones = res;\r\n              $scope.invalidCharacters = false;\r\n              $scope.existTags = false;\r\n            }, function (res) {\r\n              slideOnTop(\"Ha ocurrido un error intentelo de nuevo mas tarde\", 3000, \"glyphicon glyphicon-remove-sign\", \"danger\");\r\n            });\r\n            $scope.addDisabled = function (id) {\r\n              $(\"#\" + id).attr('disabled', 'disabled');\r\n            }\r\n            $scope.removeDisabled = function (id) {\r\n              $(\"#\" + id).removeAttr('disabled');\r\n            }\r\n            $scope.showDestinatary = false;\r\n            $scope.not = false;\r\n            $scope.datenow = true;\r\n            $scope.sendpush = false;\r\n            $scope.sendnotification = function () {\r\n              if ($scope.not) {\r\n                $scope.not = false;\r\n                $(\"#email-addresses\").hide(\"slow\");\r\n              } else {\r\n                $scope.not = true;\r\n                $(\"#email-addresses\").show(\"slow\");\r\n              }\r\n            }\r\n            \r\n            $scope.validateChecks = function (param){\r\n                if($scope.morecaracter == true && $scope.sendpush == true){\r\n\r\n                    slideOnTop(\"Lo sentimos no se puede realizar envíos de mensajes flash con la modalidad de más de 160 caracteres.\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                    \r\n                    if(param == 1 && $scope.sendpush == true){\r\n                       $scope.morecaracter = false;                        \r\n                    }else if(param == 2 && $scope.morecaracter == true){\r\n                       $scope.sendpush = false;                        \r\n                    }\r\n                }\r\n            }\r\n            //Opciones avanzadas\r\n            $scope.advancedoptions = false;\r\n            $scope.evaluateAdvancedoptions = function () {\r\n              if ($scope.advancedoptions) {\r\n                $scope.advancedoptions = false;\r\n              } else {\r\n                $scope.advancedoptions = true;\r\n              }\r\n            }\r\n\r\n            $scope.divide = false;\r\n            $scope.divideSending = function () {\r\n              if ($scope.divide) {\r\n                $scope.divide = false;\r\n                $(\"#divide-container\").hide(\"slow\");\r\n              } else {\r\n                $scope.divide = true;\r\n                $(\"#divide-container\").show(\"slow\");\r\n              }\r\n            }\r\n\r\n            $scope.timeFormats = [\r\n              {value: 'minute', name: \"Minuto(s)\"},\r\n              {value: 'hour', name: \"Hora(s)\"},\r\n              {value: 'day', name: \"Día(s)\"},\r\n              {value: 'week', name: \"Semana(s)\"},\r\n              {value: 'month', name: \"Mes(es)\"}\r\n            ];\r\n            //fin de opciones avanzadas\r\n\r\n//      $scope.expresion = function (msg){\r\n//        var regex =  /[ñÑáéíóúÁÉÍÓÚ¿¡´]/;\r\n//        console.log(regex.test(msg));\r\n//      }\r\n\r\n            $scope.validate = function () {\r\n              $scope.error = 0;\r\n              $scope.success = 0;\r\n\r\n              var existTags = 0;\r\n              var flag = true;\r\n              $scope.wrongRow = false;\r\n              $scope.arrError = [{}];\r\n              var breaks = (typeof $scope.receiver != 'undefined' && typeSms != 'csv') ? $scope.receiver.split('\\n') : [];\r\n//              if (!$scope.receiver && typeSms != 'csv') {\r\n//                flag = false;\r\n//                slideOnTop(\"El campo destinatario es obligatorio\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n//              }\r\n              $scope.total = breaks.length;\r\n              console.log(\"total: \",$scope.total);\r\n              console.log(\"totalAvailable: \",$scope.misc.totalAvailable);\r\n              if(($scope.total>$scope.misc.totalAvailable) && (idSubaccount != \"420\" || idSubaccount != 420)){\r\n                  //flag = false;\r\n                  $scope.apismsemailbalance = {};\r\n                  $scope.apismsemailbalance.total = $scope.total;\r\n                  $scope.apismsemailbalance.totalAvailable = $scope.misc.totalAvailable;\r\n                  $scope.sendMailNotificationSmsBalance();\r\n                  openModalAdvice();\r\n                  return false;\r\n              }\r\n              \r\n              //if (!$('#toggle-two').prop('checked')) {\r\n              if (!$scope.datenow) {\r\n                var startdate = document.getElementById(\"datesend\").value;\r\n                if (startdate) {\r\n                  var startdate = startdate.split(\" \");\r\n                  var time = startdate[1].split(\":\");\r\n                  if (time[0] < startHour || time[0] > endHour) {\r\n                    flag = false;\r\n                    slideOnTop(\"La hora de envio debe de ser entre las\" + startHour + \" :00  y las \" + endHour + \":00 \", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                  }\r\n                } else {\r\n                  flag = false;\r\n                  slideOnTop(\"Debes seleccionar una fecha y hora \", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                }\r\n              }\r\n              if ($scope.not == true) {\r\n                if ($scope.email == \"\") {\r\n                  slideOnTop(\"Por favor ingrese el email de notificación\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                }\r\n              }\r\n              if ($scope.email) {\r\n\r\n\r\n                var email = $scope.email.split(\",\");\r\n                emailRegex = /^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i;\r\n                var flagemail = false;\r\n                for (var a = 0; a < email.length; a++) {\r\n                  console.log(email[a]);\r\n                  if (emailRegex.test(email[a])) {\r\n                    //pasa\r\n                  } else {\r\n                    flag = false;\r\n                    flagemail = true;\r\n                    if (flagemail) {\r\n                      slideOnTop(\"Hay algún correo de notificación erroneo por favor verifique\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                      flagemail = false;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (email.length > 8) {\r\n                  flag = false;\r\n                  slideOnTop(\"Solo se puede ingresar un máximo de 8 correos electrónicos\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                }\r\n              }\r\n              if (!$scope.idSmsCategory) {\r\n                flag = false;\r\n                slideOnTop(\"Debes seleccionar una categoria\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n              }\r\n              if (!$scope.receiver && typeSms != 'csv') {\r\n                flag = false;\r\n                slideOnTop(\"Debes ingresar al menos un destinatario\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n              }\r\n              if (breaks.length > 50 && typeSms != 'csv') {\r\n                flag = false;\r\n                slideOnTop(\"Solo se puede ingresar 50 destinatarios\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n              }\r\n              var flagValidate = false;\r\n              if (typeSms != 'csv') {\r\n                for (var i = 0; i < breaks.length; i++) {\r\n                  if (!breaks[i].includes(\";\")) {\r\n                    flagValidate = true;\r\n                  }\r\n                  var sms = breaks[i].split(\";\");\r\n                  if (sms.length < 3) {\r\n                    flagValidate = true;\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (flagValidate) {\r\n                flag = false;\r\n                slideOnTop(\"Hay algún destinatario con el formato erróneo\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                $scope.wrongRow = true;\r\n              } else {\r\n                $scope.wrongRow = false;\r\n              }\r\n\r\n              var re = /[ñÑáéíóúÁÉÍÓÚ¿¡´]/;\r\n              var tags = /%%+[a-z0-9_]+%%/;\r\n              $scope.success = breaks.length;\r\n              for (var i = 0; i < breaks.length; i++) {\r\n\r\n\r\n                var sms = breaks[i].split(\";\");\r\n                var str = sms[0].indexOf(\"+\");\r\n                if (sms.length >= 4) {\r\n                  $scope.arrError.push(breaks[i]);\r\n                  $scope.success--;\r\n                }\r\n                if (!isFinite(sms[1])) {\r\n                  $scope.arrError.push(breaks[i]);\r\n                  $scope.success--;\r\n                }\r\n                if (sms.length < 3) {\r\n                  $scope.arrError.push(breaks[i]);\r\n                  $scope.success--;\r\n                }\r\n                if (sms.length == 3) {\r\n                  if (sms[1].toString().trim().length !== 10) {\r\n                    $scope.arrError.push(breaks[i]);\r\n                    $scope.success--;\r\n                  }\r\n                  if (sms[2].toString().length > 160) {\r\n                    $scope.arrError.push(breaks[i]);\r\n                    $scope.success--;\r\n                  }\r\n                  if (tags.test(sms[2].toString())) {\r\n                    existTags++;\r\n                    $scope.arrError.push(breaks[i]);\r\n                    $scope.success--;\r\n                  }\r\n                }\r\n              }\r\n              //Se hace este proceso para la carga del csv y traiga el target que envia\r\n              if ($scope.typeCsv = 'csv') {\r\n                $scope.success = $scope.targetcsv;\r\n              }\r\n\r\n              if (existTags > 0) {\r\n                $scope.existTags = true;\r\n              } else {\r\n                $scope.existTags = false;\r\n              }\r\n              if (flag) {\r\n                openModal();\r\n              }\r\n            };\r\n            $scope.validateInLine = function () {\r\n              $scope.error = 0;\r\n              $scope.success = 0;\r\n              $scope.wrongRow = false;\r\n              var existTags = 0;\r\n              var breaks = $scope.receiver.split('\\n');\r\n              var re = /[ñÑáéíóúÁÉÍÓÚ¿¡´]/;\r\n              var tags = /%%+[a-z0-9_]+%%/;\r\n              $scope.success = breaks.length;\r\n              var flagValidate = false;\r\n              for (var i = 0; i < breaks.length; i++) {\r\n                if (!breaks[i].includes(\";\")) {\r\n                  flagValidate = true;\r\n                }\r\n                var sms = breaks[i].split(\";\");\r\n                if (sms.length < 3) {\r\n                  flagValidate = true;\r\n                }\r\n              }\r\n              if (flagValidate) {\r\n                $scope.wrongRow = true;\r\n              } else {\r\n                $scope.wrongRow = false;\r\n                var email = $scope.email.split(\",\");\r\n                emailRegex = /^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i;\r\n                var flagemail = false;\r\n                for (var a = 0; a < email.length; a++) {\r\n\r\n                  console.log(email[a]);\r\n                  if (emailRegex.test(email[a])) {\r\n                    //pasa\r\n                  } else {\r\n                    flag = false;\r\n                    flagemail = true;\r\n                    if (flagemail) {\r\n                      slideOnTop(\"Hay algún correo de notificación erroneo por favor verifique\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                      flagemail = false;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (email.length > 8) {\r\n                  flag = false;\r\n                  slideOnTop(\"Solo se puede ingresar un máximo de 8 correos electrónicos\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                }\r\n              }\r\n              if (!$scope.idSmsCategory) {\r\n                flag = false;\r\n                slideOnTop(\"Debes seleccionar una categoria\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n              }\r\n              if (!$scope.receiver) {\r\n                flag = false;\r\n                slideOnTop(\"Debes ingresar al menos un destinatario\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n              }\r\n              if (breaks.length > 50) {\r\n                flag = false;\r\n                slideOnTop(\"Solo se puede ingresar 50 destinatarios\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n              }\r\n              var flagValidate = false;\r\n              for (var i = 0; i < breaks.length; i++) {\r\n                if (!breaks[i].includes(\";\")) {\r\n                  flagValidate = true;\r\n                }\r\n                var sms = breaks[i].split(\";\");\r\n                if (sms.length < 3) {\r\n                  flagValidate = true;\r\n                }\r\n              }\r\n              if (flagValidate) {\r\n                flag = false;\r\n                slideOnTop(\"Hay algún destinatario con el formato erróneo\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                $scope.wrongRow = true;\r\n              } else {\r\n                $scope.wrongRow = false;\r\n              }\r\n\r\n              var re = /[ñÑáéíóúÁÉÍÓÚ¿¡´]/;\r\n              var tags = /%%+[a-z0-9_]+%%/;\r\n              $scope.success = breaks.length;\r\n              for (var i = 0; i < breaks.length; i++) {\r\n\r\n\r\n                var sms = breaks[i].split(\";\");\r\n                var str = sms[0].indexOf(\"+\");\r\n                if (sms.length >= 4) {\r\n                  $scope.arrError.push(breaks[i]);\r\n                  $scope.error++;\r\n                  $scope.success--;\r\n                }\r\n                if (!isFinite(sms[1])) {\r\n                  $scope.arrError.push(breaks[i]);\r\n                  $scope.error++;\r\n                  $scope.success--;\r\n                }\r\n                if (sms.length < 3) {\r\n                  $scope.arrError.push(breaks[i]);\r\n                  $scope.error++;\r\n                  $scope.success--;\r\n                }\r\n                if (sms.length == 3) {\r\n                  if (sms[1].toString().trim().length !== 10) {\r\n                    $scope.arrError.push(breaks[i]);\r\n                    $scope.error++;\r\n                    $scope.success--;\r\n                  }\r\n                  if (sms[2].toString().length > 160) {\r\n                    $scope.arrError.push(breaks[i]);\r\n                    $scope.error++;\r\n                    $scope.success--;\r\n                  }\r\n                  if (re.test(sms[2].toString())) {\r\n                    $scope.arrError.push(breaks[i]);\r\n                    $scope.error++;\r\n                    $scope.success--;\r\n                  }\r\n                  if (tags.test(sms[2].toString())) {\r\n                    existTags++;\r\n                    $scope.arrError.push(breaks[i]);\r\n                    $scope.error++;\r\n                    $scope.success--;\r\n                  }\r\n                }\r\n              }\r\n              if (existTags > 0) {\r\n                $scope.existTags = true;\r\n              } else {\r\n                $scope.existTags = false;\r\n              }\r\n              if (flag) {\r\n                openModal();\r\n              }\r\n            };\r\n            $scope.validateInLine = function () {\r\n              $scope.error = 0;\r\n              $scope.success = 0;\r\n              $scope.wrongRow = false;\r\n              var existTags = 0;\r\n              var breaks = $scope.receiver.split('\\n');\r\n              var re = /[ñÑáéíóúÁÉÍÓÚ¿¡´]/;\r\n              var tags = /%%+[a-z0-9_]+%%/;\r\n              $scope.success = breaks.length;\r\n              var flagValidate = false;\r\n              for (var i = 0; i < breaks.length; i++) {\r\n                if (!breaks[i].includes(\";\")) {\r\n                  flagValidate = true;\r\n                }\r\n                var sms = breaks[i].split(\";\");\r\n                if (sms.length < 3) {\r\n                  flagValidate = true;\r\n                }\r\n              }\r\n              if (flagValidate) {\r\n                $scope.wrongRow = true;\r\n              } else {\r\n                $scope.wrongRow = false;\r\n              }\r\n              for (var i = 0; i < breaks.length; i++) {\r\n                var sms = breaks[i].split(\";\");\r\n                var str = sms[0].indexOf(\"+\");\r\n                if (sms.length == 3) {\r\n                  if (tags.test(sms[2].toString())) {\r\n                    existTags++;\r\n                    $scope.error++;\r\n                    $scope.success--;\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (existTags > 0) {\r\n                $scope.existTags = true;\r\n              } else {\r\n                $scope.existTags = false;\r\n              }\r\n            };\r\n            $scope.createlote = function () {\r\n              var data = {};\r\n              data = {\r\n                name: $scope.name,\r\n                notification: $scope.not,\r\n                email: $scope.email,\r\n                receiver: $scope.receiver,\r\n                idSmsCategory: $scope.idSmsCategory,\r\n                datesend: document.getElementById(\"datesend\").value,\r\n//                datenow: $('#toggle-two').prop('checked'),\r\n                timezone: $scope.timezone,\r\n                AproximateSendings: $scope.success,\r\n                advancedoptions: $scope.advancedoptions,\r\n                morecaracter : $scope.morecaracter,\r\n                divide: $scope.divide,\r\n                continueError:  $scope.continueError,\r\n                sendingTime: $scope.sendingTime,\r\n                timeFormat: $scope.timeFormat,\r\n                quantity: $scope.quantity,\r\n                idSms: $scope.idSms,\r\n                datenow: $scope.datenow,\r\n                gmt: $scope.gmt,\r\n                originalDate: document.getElementById(\"datesend\").value,\r\n                sendpush: $scope.sendpush\r\n                \r\n              };\r\n              main.createLote(data, function (res) {\r\n                closeModal();\r\n                var route = $window.myBaseURL + \"sms/\";\r\n                $window.location.href = route;\r\n              }, function (res) {                \r\n                slideOnTop(res.message, 3000, \"glyphicon glyphicon-remove-sign\", \"danger\");\r\n                $rootScope.error = 'fail';\r\n              });\r\n            }\r\n\r\n            $scope.editlote = function () {\r\n              var data = {\r\n                name: $scope.name,\r\n                notification: $scope.not,\r\n                email: $scope.email,\r\n                receiver: $scope.receiver,\r\n                idSmsCategory: $scope.idSmsCategory,\r\n                datesend: document.getElementById(\"datesend\").value,\r\n//                datenow: $('#toggle-two').prop('checked'),\r\n                timezone: $scope.timezone,\r\n                AproximateSendings: $scope.success,\r\n                advancedoptions: $scope.advancedoptions,\r\n                morecaracter : $scope.morecaracter,\r\n                divide: $scope.divide,\r\n                continueError:  $scope.continueError,\r\n                sendingTime: document.getElementById(\"sendingTime\").value,\r\n                timeFormat: $scope.timeFormat,\r\n                quantity: $scope.quantity,\r\n                idSms: $scope.idSms,\r\n                datenow: $scope.datenow,\r\n                gmt: $scope.gmt,\r\n                originalDate: document.getElementById(\"datesend\").value,\r\n                sendpush: $scope.sendpush\r\n              };\r\n              main.editLote(data, function (res) {\r\n                closeModal();\r\n                var route = $window.myBaseURL + \"sms/\";\r\n                $window.location.href = route;\r\n              }, function (res) {\r\n                if (data.datenow == false) {\r\n                  $scope.datenow = false;\r\n                } else {\r\n                  $scope.datenow = true;\r\n                } \r\n                slideOnTop(res, 3000, \"glyphicon glyphicon-remove-sign\", \"danger\");\r\n                $rootScope.error = 'fail';\r\n              });\r\n            }\r\n\r\n            $scope.sendnow = function () {\r\n              if ($scope.datenow) {\r\n                $scope.datenow = false;\r\n              } else {\r\n                $scope.datenow = true;\r\n              }\r\n            }\r\n            \r\n            $scope.opeModalMoreCa = function () {\r\n                if( $('#morecaracter').prop('checked') && $('#sendpush').prop('checked') == false) {\r\n                   $('#alertMoreCaracter').removeClass('modal'); \r\n                   $('#alertMoreCaracter').addClass('dialog dialog--open'); \r\n                }\r\n            }\r\n\r\n            $scope.getCategory = function () {\r\n              main.getCategory().then(function (data) {\r\n                $scope.smsCategory = data;\r\n              });\r\n            }\r\n\r\n            $scope.validateprocess = function () {\r\n              var flag = false;\r\n              var name = document.getElementById(\"name\").value;\r\n              var idSmsCategory = document.getElementById(\"idSmsCategory\").value;\r\n              var timezone = document.getElementById(\"timezone\").value;\r\n              var datesend = document.getElementById(\"datesend\").value;\r\n              var email = document.getElementById(\"email\").value;\r\n              var quantity = document.getElementById(\"quantity\").value;\r\n              var sendingTime = document.getElementById(\"sendingTime\").value;\r\n              var timeFormat = document.getElementById(\"timeFormat\").value;\r\n              if (name == \"\") {\r\n                slideOnTop(\"El nombre de envío esta incompleto, por favor ingrese un nombre\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                flag = true;\r\n              } else if (idSmsCategory == \"\") {\r\n                slideOnTop(\"Por favor ingrese una categoria\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                flag = true;\r\n              } else if ($scope.datenow == false) {\r\n                if (timezone == \"\") {\r\n                  slideOnTop(\"Por favor ingrese zona horaria\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                  flag = true;\r\n                } else if (datesend == \"\") {\r\n                  slideOnTop(\"Por favor ingrese fecha y hora de envio\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                  flag = true;\r\n                }\r\n              } else if ($scope.advancedoptions == true) {\r\n\r\n                if ($scope.not == true) {\r\n                  if (email == \"\") {\r\n                    slideOnTop(\"Por favor ingrese el email de notificación\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                    flag = true;\r\n                  } else {\r\n                    let emailArray = $scope.email.split(/[\\s\\n, ;]+/);\r\n                    let emailRegex = /^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i;\r\n                    for (var a = 0; a < emailArray.length; a++) {\r\n                      if (!emailRegex.test(emailArray[a])) {\r\n                        slideOnTop(\"El coreo ( \" + emailArray[a] + \" ) ingresado no es valido\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                        flag = true;\r\n                      }\r\n                    }\r\n                    if (emailArray.length > 8) {\r\n                      slideOnTop(\"Solo se puede ingresar un máximo de 8 correos electrónicos\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                      flag = true;\r\n                    }\r\n                  }\r\n                } /*else if ($scope.divide == true) {\r\n                  if (quantity == \"\") {\r\n                    slideOnTop(\"Por favor ingrese la cantidad de envio por intervalos\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                    flag = true;\r\n                  } else if (sendingTime == \"\") {\r\n                    slideOnTop(\"Por favor ingrese tiempo de envio\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                    flag = true;\r\n                  } else if (timeFormat == \"\") {\r\n                    slideOnTop(\"Por favor ingrese el formato de envio\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                    flag = true;\r\n                  }\r\n                }*/\r\n              }\r\n              if (flag == false) {\r\n                var form = angular.element(document.getElementById('form').elements);\r\n                var formData = new FormData();\r\n                var config = {};\r\n                config.headers = {};\r\n                config.transformRequest = angular.identity;\r\n                config.headers['Content-Type'] = undefined;\r\n                for (var i = 0; i < form.length; i++) {\r\n                  if (form[i].getAttribute(\"name\") != null) {\r\n                    if (form[i].getAttribute(\"name\") == \"csv\") {\r\n                      formData.append(form[i].getAttribute(\"name\"), form[i].files[0]);\r\n                      //formData.append(\"idSmsCreated\", $scope.misc.idSms); \r\n                    } else {\r\n                      console.log(form[i].getAttribute(\"name\"), form[i].type, form[i].checked);\r\n                      if (form[i].type == \"checkbox\") {\r\n                        if (form[i].checked) {\r\n                          formData.append(form[i].getAttribute(\"name\"), form[i].value);\r\n                        }\r\n                      } else {\r\n                        formData.append(form[i].getAttribute(\"name\"), form[i].value);\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                $('#ProcessCsv').addClass('dialog--open');\r\n                $scope.misc.ProccessCsv.porc = 20;\r\n                $http.post(fullUrlBase + 'api/sms/createcsv', formData, config)\r\n                        .success(function (data) {})\r\n                        .error(function (data) {\r\n                          notificationService.error(data.message);\r\n                          //$('#ProcessCsv').removeClass('dialog--open');\r\n                        });\r\n              } else {\r\n                document.getElementById(\"savecsv\").style.display = 'block';\r\n              }\r\n\r\n            }\r\n\r\n            $scope.verifyservicetwoway = function () {\r\n              main.getServiceVerified().then(function (data) {\r\n                $scope.smsverified = data;\r\n                if ($scope.smsverified == 1) {\r\n                  $scope.showButtonTwoway = true;\r\n                } else {\r\n                  $scope.showButtonTwoway = false;\r\n                }\r\n              });\r\n            };\r\n            $scope.forward = function () {\r\n              $scope.initial += 1;\r\n              $scope.page += 1;\r\n              $scope.getAll();\r\n            };\r\n            $scope.fastforward = function () {\r\n              $scope.initial = ($scope.sms.total_pages - 1);\r\n              $scope.page = $scope.sms.total_pages;\r\n              $scope.getAll();\r\n            };\r\n            $scope.backward = function () {\r\n              $scope.initial -= 1;\r\n              $scope.page -= 1;\r\n              $scope.getAll();\r\n            };\r\n            $scope.fastbackward = function () {\r\n              $scope.initial = 0;\r\n              $scope.page = 1;\r\n              $scope.getAll();\r\n            };\r\n            $scope.search = function () {\r\n              $scope.misc.progressbar = false;\r\n              $scope.initial = 0;\r\n              $scope.page = 1;\r\n              $scope.getAll();\r\n            };\r\n            $scope.searchcategory = function () {\r\n              $scope.misc.progressbar = false;\r\n              if ($scope.filter.category.length >= 1) {\r\n                $scope.initial = 0;\r\n                $scope.page = 1;\r\n                $scope.getAll();\r\n              } else {\r\n                $scope.getAll();\r\n              }\r\n            };\r\n            $scope.$watch('[filter.dateinitial,filter.dateend]', function () {\r\n              if ((angular.isDefined($scope.filter.dateinitial) && $scope.filter.dateinitial != \"\") && (angular.isDefined($scope.filter.dateend) && $scope.filter.dateend != \"\")) {\r\n                $scope.misc.progressbar = false;\r\n                $scope.initial = 0;\r\n                $scope.page = 1;\r\n                $scope.getAll();\r\n              }\r\n            });\r\n            $scope.statusFunc = function () {\r\n//                  console.log('Afuera');\r\n//                  console.log($scope.filter.mailStatus);\r\n              if ($scope.filter.smsStatus.length > 0) {\r\n//                  console.log('Adentro');\r\n//                  console.log($scope.filter.mailStatus);\r\n                $scope.initial = 0;\r\n                $scope.page = 1;\r\n                $scope.getAll();\r\n              }\r\n            };\r\n            $scope.getAll = function () {              \r\n                main.getSms($scope.initial, $scope.filter).then(function (data)\r\n                {\r\n                  $scope.sms = data;\r\n                  $scope.complete = true;\r\n                  $scope.misc.progressbar = true;\r\n                }).catch(function (error) {\r\n                  notificationService.error(error.message);\r\n                  $scope.misc.progressbar = true;\r\n                })              \r\n            };\r\n            $scope.getOne = function (idSms) {\r\n              \r\n              main.getOneSms(idSms).then(function (data)\r\n              {\r\n                $scope.sms = data;\r\n                $scope.typeCsv = $scope.sms.type;\r\n                $scope.targetcsv = $scope.sms.target;\r\n                $scope.idSms = $scope.sms.idSms;\r\n                $scope.name = $scope.sms.name;\r\n                $scope.not = false;\r\n                if ($scope.sms.notification == 1) {\r\n                  $scope.not = true;\r\n                }\r\n                if($scope.sms.morecaracter === true){\r\n                   $scope.morecaracter = true;\r\n                   $(\"#morecaracter\").prop('checked', true);\r\n                }else{\r\n                   $scope.morecaracter = false; \r\n                   $(\"#morecaracter\").prop('checked', false);\r\n                }\r\n                $scope.email = $scope.sms.email;\r\n                $scope.receiver = $scope.sms.receiver;\r\n                $scope.idSmsCategory = $scope.sms.idSmsCategory;\r\n                $scope.originalDate = $scope.sms.originalDate;\r\n                $scope.datenow = false;\r\n                $('#toggle-two').bootstrapToggle('off');\r\n                if ($scope.sms.dateNow == 1) {\r\n                  $scope.datenow = true;\r\n                  $('#toggle-two').bootstrapToggle('on');\r\n                }\r\n                if ($scope.sms.advancedoptions == 1) {\r\n                  $scope.advancedoptions = true;\r\n                  $('#toggle-three').bootstrapToggle('on');\r\n                }\r\n                if ($scope.sms.notification == 1) {\r\n                  $scope.not = true;\r\n                  $('#toggle-one').bootstrapToggle('on');\r\n                }\r\n                if ($scope.sms.divide == 1) {\r\n                  $scope.divide = true;\r\n                  $('#toggle-four').bootstrapToggle('on');\r\n                }\r\n                if($scope.sms.sendpush == 1){\r\n                  $scope.sendpush = true;\r\n                  $('#toggle-one').bootstrapToggle('on');\r\n                }\r\n                $scope.timezone;\r\n                $scope.AproximateSendings;\r\n                $scope.timeFormat = $scope.sms.timeFormat;\r\n                $scope.quantity = parseInt($scope.sms.quantity);\r\n//                $scope.gmt = $scope.sms.gmt;\r\n                $scope.gmt = $scope.sms.gmt;\r\n              });\r\n            };\r\n            $scope.validateBalance = function () {\r\n              main.validateBalance().then(function (data) {\r\n                $scope.misc.tempSumSmsPendingTarget = 0;\r\n                if(data.smsFindPending.length>0){\r\n                    angular.forEach(data.smsFindPending, function (value, key) {\r\n                        $scope.misc.tempSumSmsPendingTarget = $scope.misc.tempSumSmsPendingTarget + parseInt(value.target);\r\n                    });\r\n                }\r\n                else{\r\n                    $scope.misc.smsAvailable = 0;\r\n                }\r\n                if(data.balanceConsumedFind.length>0){\r\n                    $scope.misc.balanceAvailable = data.balanceConsumedFind[0]['amount'];\r\n                    $scope.misc.balanceTotalGet = data.balanceConsumedFind[0]['totalAmount'];\r\n                }\r\n                else{\r\n                    $scope.misc.balanceAvailable = 0;\r\n                }\r\n                \r\n                $scope.misc.totalAvailable = parseInt($scope.misc.balanceAvailable) - parseInt($scope.misc.tempSumSmsPendingTarget);\r\n                \r\n                console.log('smsFindPending:',data.smsFindPending);\r\n                console.log('balanceConsumedFind:',data.balanceConsumedFind);\r\n                console.log('tempSumSmsPendingTarget',$scope.misc.tempSumSmsPendingTarget);\r\n                console.log('scope.misc.balanceConsumed',$scope.misc.balanceAvailable);\r\n                console.log('scope.misc.totalAvailable',$scope.misc.totalAvailable);\r\n              });\r\n            };\r\n            \r\n            $scope.sendMailNotificationSmsBalance = function () {\r\n                   main.sendMailNotificationSmsBalance($scope.apismsemailbalance).then(function (data) { \r\n                    });\r\n                }; \r\n            $scope.sendMailNotificationSmsBalanceCsv = function () {\r\n                   main.sendMailNotificationSmsBalance($scope.apismsemailbalancecvs).then(function (data) { \r\n                    });\r\n                }; \r\n            \r\n            if (loadGetAll == ''){\r\n              $scope.getAll();\r\n            }\r\n            \r\n            //$scope.verifyservicetwoway();\r\n            $scope.validateBalance();\r\n            $scope.changeStatusCsv = function (status) {\r\n              $http.post(fullUrlBase + 'api/sms/changestatus/' + $scope.misc.idSms, {status: status}).then(function () {\r\n                var route = $window.myBaseURL + \"sms/\";\r\n                $window.location.href = route;\r\n              }).catch(function () {});\r\n            }\r\n            \r\n            //METODO PARA VALIDAR LA CANTIDAD DE MENSAJES EN EL CSV Y EL SALDO DISPONIBLE\r\n            $scope.balanceCSV = false;\r\n            $scope.validateBalanceCSV = function(totalAvailable, countSent){\r\n                if(totalAvailable < countSent){\r\n                    $scope.balanceCSV = true;\r\n                }\r\n            };\r\n            \r\n            socket.on('loading-csv-sms', function (data) {\r\n              console.info(\"Node Data\", data);\r\n              if (data.idSubaccount == idSubaccountLogin) {\r\n                if (data.status == \"preload\") {\r\n                  $scope.misc.ProccessCsv.preload = {};\r\n                  $scope.misc.ProccessCsv.porc += 20;\r\n                }\r\n                if (data.status == \"validations\") {\r\n                  $scope.misc.ProccessCsv.porc += 20;\r\n                  $scope.misc.ProccessCsv.preload.data = data.data;\r\n                  $scope.misc.ProccessCsv.validations = {};\r\n                }\r\n                if (data.status == \"load\") {\r\n                  $scope.misc.ProccessCsv.porc += 20;\r\n                  $scope.misc.ProccessCsv.validations.data = data.data;\r\n                  $scope.misc.ProccessCsv.load = {};\r\n                }\r\n                if (data.status == \"finish\") {\r\n                 \r\n                  console.log('totalAvailable:',$scope.misc.totalAvailable);\r\n                  $scope.misc.ProccessCsv.porc += 20;\r\n                  $scope.misc.ProccessCsv.load.data = data.data;\r\n                  $scope.misc.ProccessCsv.finish = {};\r\n                  $scope.misc.idSms = data.id;\r\n                  $scope.misc.ProccessCsv.finish.message = data.message;\r\n                  $scope.triggerEmailNotificationBalance();\r\n                  if(idSubaccountLogin != 420 || idSubaccountLogin != \"420\"){\r\n                    $scope.validateBalanceCSV($scope.misc.totalAvailable, $scope.misc.ProccessCsv.load.data.countSent);\r\n                  }\r\n\r\n                }\r\n              }\r\n            });\r\n            \r\n\r\n            \r\n            $scope.cancelSmsAndDeleteLotes = function () {\r\n              main.deletevarioussmslotes($scope.misc.idSms).then(function (data) { /*nothing to do...*/\r\n              });\r\n            };\r\n            $scope.misc.progressbar = false;\r\n            $scope.downloadFailedSms = function () {\r\n              $scope.titleReport = \"Detalle números Invalidos\";\r\n              $scope.misc.progressbar = true;\r\n              main.downloadFailedSms($scope.misc.ProccessCsv, $scope.misc.idSms).then(function () {\r\n                var url = fullUrlBase + 'statistic/downloadexcel/' + $scope.titleReport;\r\n                location.href = url;\r\n                $scope.misc.progressbar = false;\r\n              });\r\n            };\r\n            socket.on('refresh-view-sms', function (data) {\r\n              for (i in $scope.sms.items) {\r\n                if ($scope.sms.items[i].idSms == data.idSms) {\r\n                  $scope.sms.items.target = 1000;\r\n                  $scope.sms.items[i].status = data.status;\r\n                }\r\n              }\r\n            });\r\n            socket.on('refresh-view-sms-send', function (data) {\r\n              for (i in $scope.sms.items) {\r\n                if ($scope.sms.items[i].idSms == data.idSms) {\r\n                  $scope.sms.items[i].sent = data.sent;\r\n                  $scope.sms.items[i].total = data.total;\r\n                }\r\n              }\r\n            });\r\n            /*$scope.getBalanceSubAccount = function(){\r\n                main.getBalanceSubAccount().then(function (data) {\r\n                    console.log('Data getBalanceSubAccount:', data);\r\n                });\r\n            }\r\n            $scope.getBalanceSubAccount();*/\r\n                \r\n            $scope.triggerEmailNotificationBalance = function (){\r\n                if($scope.misc.totalAvailable<$scope.misc.ProccessCsv.load.data.countSent){\r\n                   $scope.apismsemailbalancecvs = {};\r\n                   $scope.apismsemailbalancecvs.total = $scope.misc.ProccessCsv.load.data.countSent;\r\n                   $scope.apismsemailbalancecvs.totalAvailable = $scope.misc.totalAvailable;\r\n                   $scope.sendMailNotificationSmsBalanceCsv();\r\n                }\r\n                \r\n            };\r\n            \r\n            \r\n                \r\n          }])\r\n        .controller('smsContact', ['$rootScope', '$scope', '$http', 'main', '$window', '$timeout', 'notificationService', function ($rootScope, $scope, $http, main, $window, $timeout, notificationService) {\r\n            $scope.listAddressee = [{id: 1, name: \"Listas de contactos\"}, {id: 2, name: \"Segmentos\"}];\r\n            $scope.arrAddressee = [];\r\n            $scope.listSelected = {};\r\n            $scope.data = {};\r\n            $scope.datenow = false;\r\n            $scope.viewTemplate = false;\r\n            $scope.notification = false;\r\n            $scope.notificationEmail = false;\r\n            $scope.allList = false;\r\n            $scope.gmt = \"-0500\";\r\n            $scope.countContactsApproximate = {};\r\n            $scope.countContactsApproximate.counts = 0;\r\n            $scope.advancedoptions = false;\r\n            $scope.divide = false;\r\n            $scope.continueError = false;\r\n            $scope.initProcessValidate = false;\r\n            $scope.editandcreate = false;\r\n            $scope.progresslinear = false;\r\n            $scope.switchrepeated = true;\r\n            $scope.morecaracter = false;\r\n            $scope.sendpush = false;\r\n            $scope.misc = {};\r\n            \r\n            $scope.validateBalanceSmsContact = function () {\r\n              main.validateBalance().then(function (data) {\r\n                $scope.misc.tempSumSmsPendingTarget = 0;\r\n                if(data.smsFindPending.length>0){\r\n                    angular.forEach(data.smsFindPending, function (value, key) {\r\n                        $scope.misc.tempSumSmsPendingTarget = $scope.misc.tempSumSmsPendingTarget + parseInt(value.target);\r\n                    });\r\n                }\r\n                else{\r\n                    $scope.misc.smsAvailable = 0;\r\n                }\r\n                if(data.balanceConsumedFind.length>0){\r\n                    $scope.misc.balanceAvailable = data.balanceConsumedFind[0]['amount'];\r\n                    $scope.misc.balanceTotalGet = data.balanceConsumedFind[0]['totalAmount'];\r\n                }\r\n                else{\r\n                    $scope.misc.balanceAvailable = 0;\r\n                }\r\n                \r\n                $scope.misc.totalAvailable = parseInt($scope.misc.balanceAvailable) - parseInt($scope.misc.tempSumSmsPendingTarget);\r\n                \r\n                console.log('smsFindPending:',data.smsFindPending);\r\n                console.log('balanceConsumedFind:',data.balanceConsumedFind);\r\n                console.log('tempSumSmsPendingTarget',$scope.misc.tempSumSmsPendingTarget);\r\n                console.log('scope.misc.balanceConsumed',$scope.misc.balanceAvailable);\r\n                console.log('scope.misc.totalAvailable',$scope.misc.totalAvailable);\r\n              });\r\n            };\r\n            \r\n            $scope.validateChecks = function (param){\r\n                if($scope.morecaracter == true && $scope.sendpush == true){\r\n\r\n                    slideOnTop(\"Lo sentimos no se puede realizar envíos de mensajes flash con la modalidad de más de 160 caracteres.\", 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n                    \r\n                    if(param == 1 && $scope.sendpush == true){\r\n                       $scope.morecaracter = false;                        \r\n                    }else if(param == 2 && $scope.morecaracter == true){\r\n                       $scope.sendpush = false;                        \r\n                    }\r\n                }\r\n            }\r\n            \r\n            $scope.validateId = function () {\r\n              if (!angular.isUndefined(idSms)) {\r\n                $scope.name = nameSms;\r\n                $scope.showAddressee = true;\r\n                if (receiverSms.type == \"contactlist\") {\r\n                  $scope.data.listSelected = $scope.listAddressee[0];\r\n                  $scope.getDetinatary($scope.data.listSelected);\r\n                  $scope.data.arrAddressee = receiverSms.contactlists;\r\n                } else {\r\n                  $scope.data.listSelected = $scope.listAddressee[1];\r\n                  $scope.getDetinatary($scope.data.listSelected);\r\n                  $scope.data.arrAddressee = receiverSms.segment;\r\n                }\r\n                $scope.data.message = messageSms;\r\n                $scope.countContacts();\r\n                if (emailSms != \"\") {\r\n                  $scope.not = false;\r\n                  $scope.notificationEmail = true;\r\n                  $scope.email = emailSms;\r\n                }\r\n              }\r\n            }\r\n            main.getlisttimezone(function (res) {\r\n              $scope.timezones = res;\r\n              $scope.timezone = \"-0500\";\r\n            }, function (res) {\r\n              slideOnTop(\"Ha ocurrido un error intentelo de nuevo mas tarde\", 3000, \"glyphicon glyphicon-remove-sign\", \"danger\");\r\n            });\r\n\r\n            $scope.timeFormats = [\r\n              {value: 'minute', name: \"Minuto(s)\"},\r\n              {value: 'hour', name: \"Hora(s)\"},\r\n              {value: 'day', name: \"Día(s)\"},\r\n              {value: 'week', name: \"Semana(s)\"},\r\n              {value: 'month', name: \"Mes(es)\"}\r\n            ];\r\n            //fin de opciones avanzadas\r\n\r\n            $scope.addDisabled = function (id) {\r\n              $(\"#\" + id).attr('disabled', 'disabled');\r\n            }\r\n            $scope.removeDisabled = function (id) {\r\n              $(\"#\" + id).removeAttr('disabled');\r\n            }\r\n\r\n            $scope.opeModalMoreCa = function () {\r\n                if( $('#morecaracter').prop('checked') && $('#sendpush').prop('checked') == false) {\r\n                   $('#alertMoreCaracter').removeClass('modal'); \r\n                   $('#alertMoreCaracter').addClass('dialog dialog--open'); \r\n                }\r\n            }\r\n\r\n            $scope.timeFormats = [\r\n              {value: 'minute', name: \"Minuto(s)\"},\r\n              {value: 'hour', name: \"Hora(s)\"},\r\n              {value: 'day', name: \"Día(s)\"},\r\n              {value: 'week', name: \"Semana(s)\"},\r\n              {value: 'month', name: \"Mes(es)\"}\r\n            ];\r\n            //fin de opciones avanzadas\r\n\r\n            $scope.addDisabled = function (id) {\r\n              $(\"#\" + id).attr('disabled', 'disabled');\r\n            }\r\n            $scope.removeDisabled = function (id) {\r\n              $(\"#\" + id).removeAttr('disabled');\r\n            }\r\n            \r\n            //METODO PARA VALIDAR LA CANTIDAD DE MENSAJES EN EL CSV Y EL SALDO DISPONIBLE\r\n            $scope.balanceCSV = false;\r\n            $scope.validateBalanceCSV = function(totalAvailable, countSent){\r\n                if(totalAvailable < countSent){\r\n                    $scope.balanceCSV = true;\r\n                    console.log(\"balanceCSV: \",$scope.balanceCSV);\r\n                }\r\n            };\r\n\r\n            $scope.validate = function () {\r\n              $scope.error = 0;\r\n              $scope.success = 0;\r\n              var flag = true;\r\n              $scope.arrError = [{}];\r\n              try {\r\n\r\n                if (!$scope.datenow) {\r\n                  var startdate = document.getElementById(\"datesend\").value;\r\n                  if (startdate) {\r\n                    var startdate = startdate.split(\" \");\r\n                    var time = startdate[1].split(\":\");\r\n                    if (time[0] < startHour || time[0] > endHour) {\r\n                      throw(\"La hora de envio debe de ser entre las\" + startHour + \" :00  y las \" + endHour + \":00 \");\r\n                    }\r\n                  } else {\r\n                    throw(\"Debes seleccionar una fecha y hora \");\r\n                  }\r\n                }\r\n                if ($scope.not == true) {\r\n                  if ($scope.email == \"\") {\r\n                    throw(\"Por favor ingrese el email de notificación\");\r\n                  }\r\n                }\r\n                if ($scope.email) {\r\n                  var email = $scope.email.split(\",\");\r\n                  if (email.length == 0) {\r\n                    throw(\"No se encontro ningun correo electronico.\");\r\n                  }\r\n                  if (email.length > 8) {\r\n                    throw(\"Solo se puede ingresar un máximo de 8 correos electrónicos\");\r\n                  }\r\n                  for (var i = 0; i < email.length; i++) {\r\n                    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                    email[i] = email[i].trim();\r\n                    if (!email[i].match(re)) {\r\n                      throw(\"El correo \" + email[i] + \" no es valido.\");\r\n                    }\r\n                  }\r\n                }\r\n                var message = $('#message').val(); \r\n                $scope.data.message = message;\r\n                message = null;\r\n                if (!$scope.idSmsCategory) {\r\n                  throw(\"Debes seleccionar una categoria\");\r\n                }\r\n                if (angular.isUndefined($scope.data.listSelected)) {\r\n                  throw(\"Debe seleccionar una lista de destinatarios\");\r\n                }\r\n                if (angular.isUndefined($scope.data.arrAddressee) || $scope.data.arrAddressee == 0) {\r\n                  throw (\"Debe seleccionar al menos un segmento o lista de contacto.\");\r\n                }\r\n\r\n                if (angular.isUndefined($scope.data.message) || $scope.data.message.length < 2) {\r\n                  console.log($scope.data);  \r\n                  throw (\"El mensaje es obligatorio y debe ser mayor a dos caracteres.\");\r\n                }\r\n//                if ($scope.newMessage.length > 160) {\r\n//                  throw (\"El mensaje no puede ser mayor a 160 caracteres.\");\r\n//                }\r\n                console.log(\"totalAvailable: \",$scope.misc.totalAvailable);\r\n                console.log(\"countContactsApproximate: \",$scope.countContactsApproximate.counts);\r\n                if(idSubaccount != 420 || idSubaccount != \"420\"){\r\n                    $scope.validateBalanceCSV($scope.misc.totalAvailable, $scope.countContactsApproximate.counts);\r\n                }\r\n                openModal();\r\n\r\n              } catch ($err) {\r\n                slideOnTop($err, 3000, \"glyphicon glyphicon-info-sign\", \"danger\");\r\n              }\r\n            };\r\n\r\n            $scope.validatecreate = function () {\r\n              main.validatesmscontact($scope.IdSms)\r\n                      .then(function (data) {\r\n                        closeModal();\r\n                        var route = $window.myBaseURL + \"sms/\";\r\n                        $window.location.href = route;\r\n                      })\r\n                      .catch(function (data) {\r\n                        slideOnTop(data.message, 3000, \"glyphicon glyphicon-remove-sign\", \"danger\");\r\n                        $rootScope.error = 'fail';\r\n                      });\r\n\r\n            }\r\n\r\n            $scope.canceledandedit = function () {\r\n              idSms = $scope.IdSms\r\n              closeModal();\r\n              $scope.initProcessValidate = false;\r\n              $scope.editandcreate = true;\r\n\r\n            }\r\n\r\n            $scope.downloadFailedSms = function () {\r\n              $scope.titleReport = \"Detalle números Invalidos\";\r\n              $scope.data;\r\n              main.downloadFailedSmsContact($scope.data, $scope.IdSms).then(function () {\r\n                var url = fullUrlBase + 'statistic/downloadexcel/' + $scope.titleReport;\r\n                location.href = url;\r\n              });\r\n            };\r\n\r\n            $scope.sendnow = function () {\r\n              if ($scope.datenow) {\r\n                $scope.datenow = false;\r\n              } else {\r\n                $scope.datenow = true;\r\n              }\r\n            }\r\n\r\n            $scope.createcontact = function () {\r\n              $scope.disabled = true;\r\n              $scope.progresslinear = true;\r\n\r\n              if ($scope.editandcreate == true) {\r\n                $scope.editContact();\r\n              } else {\r\n\r\n                var data = {};\r\n                var target = {};\r\n                if ($scope.data.listSelected.id == 1) {\r\n                  target = {type: 'contactlist', contactlists: $scope.data.arrAddressee};\r\n                } else {\r\n                  target = {type: 'segment', segment: $scope.data.arrAddressee};\r\n                }\r\n\r\n                data = {\r\n                  name: $scope.name,\r\n//                notification: $('#toggle-one').prop('checked'),\r\n                  notification: $scope.not,\r\n                  email: $scope.email,\r\n                  target: $scope.countContactsApproximate.counts,\r\n                  receiver: target,\r\n                  message: $scope.data.message,\r\n                  idSmsCategory: $scope.idSmsCategory,\r\n                  datesend: document.getElementById(\"datesend\").value,\r\n//                datenow: $('#toggle-two').prop('checked'),\r\n                  timezone: $scope.timezone,\r\n                  AproximateSendings: $scope.success,\r\n                  advancedoptions: $scope.advancedoptions,\r\n                  divide: $scope.divide,\r\n                  continueError: $scope.continueError,\r\n                  sendingTime: $scope.sendingTime,\r\n                  timeFormat: $scope.timeFormat,\r\n                  quantity: $scope.quantity,\r\n                  idSms: $scope.idSms,\r\n                  datenow: $scope.datenow,\r\n                  gmt: $scope.gmt,\r\n                  morecaracter : $scope.morecaracter,\r\n                  originalDate: document.getElementById(\"datesend\").value,\r\n                  switchrepeated: $scope.switchrepeated,\r\n                  sendpush: $scope.sendpush\r\n                };\r\n\r\n                if ($scope.viewTemplate == true && $scope.idSmsTemplate == undefined) {\r\n                  notificationService.error(\"Si desea usar una plantilla predefinida de SMS, debe seleccionarla de la lista de plantillas\");\r\n                  return false;\r\n                }\r\n\r\n                main.createContact(data)\r\n                        .then(function (data) {\r\n                          console.log(data);\r\n                          $scope.disabled = false;\r\n                          $scope.validcount = data.data.Envios;\r\n                          $scope.invalicount = data.data.Invalidos;\r\n                          $scope.IdSms = data.data.IdSms;\r\n                          $scope.initProcessValidate = true;\r\n                          $scope.progresslinear = false;\r\n\r\n                          //closePreview();\r\n                          //var route = $window.myBaseURL + \"sms/\";\r\n                          //$window.location.href = route;\r\n                        })\r\n                        .catch(function (data) {\r\n                          $scope.progresslinear = false;\r\n                          slideOnTop(data.data.message, 3000, \"glyphicon glyphicon-remove-sign\", \"danger\");\r\n                          $rootScope.error = 'fail';\r\n                        });\r\n              }\r\n            }\r\n\r\n            $scope.sendnotification = function () {\r\n              if ($scope.not) {\r\n                $scope.not = false;\r\n                //$(\"#email-addresses\").hide(\"slow\");\r\n              } else {\r\n                $scope.not = true;\r\n                // $(\"#email-addresses\").show(\"slow\");\r\n              }\r\n            }\r\n\r\n            $scope.editContact = function () {\r\n\r\n              $scope.progresslinear = true;\r\n\r\n              var data = {};\r\n              var target = {};\r\n              if ($scope.data.listSelected.id == 1) {\r\n                target = {type: 'contactlist', contactlists: $scope.data.arrAddressee};\r\n              } else {\r\n                target = {type: 'segment', segment: $scope.data.arrAddressee};\r\n              }\r\n\r\n              if (!$scope.not) {\r\n                $scope.email = \"\";\r\n              }\r\n\r\n              data = {\r\n                name: $scope.name,\r\n                notification: $('#toggle-one').prop('checked'),\r\n                email: $scope.email,\r\n                target: $scope.countContactsApproximate.counts,\r\n                receiver: target,\r\n                message: $scope.data.message,\r\n                idSmsCategory: $scope.idSmsCategory,\r\n                datesend: document.getElementById(\"datesend\").value,\r\n                datenow: $scope.datenow,\r\n                timezone: $scope.timezone,\r\n                idSms: idSms,\r\n                morecaracter : $scope.morecaracter,\r\n                sendpush : $scope.sendpush,\r\n                switchrepeated: $scope.switchrepeated\r\n              };\r\n              $scope.taggedMessage = $scope.data.message;\r\n              console.log(data);\r\n              main.editContact(data)\r\n                      .then(function (data) {\r\n\r\n                        $scope.validcount = data.Envios;\r\n                        $scope.invalicount = data.Invalidos;\r\n                        $scope.IdSms = data.IdSms;\r\n                        $scope.initProcessValidate = true;\r\n                        $scope.progresslinear = false;\r\n                      })\r\n                      .catch(function (data) {\r\n                        $scope.progresslinear = false;\r\n                        console.log(data);\r\n                        slideOnTop(data, 3000, \"glyphicon glyphicon-remove-sign\", \"danger\");\r\n                        $rootScope.error = 'fail';\r\n                      });\r\n            }\r\n            $scope.errorMessage = false;\r\n            $scope.validateInLine = function () {\r\n              $scope.invalidCharacters = false;\r\n              $scope.existTags = false;\r\n              $scope.taggedMessage = $scope.data.message;\r\n              $scope.newMessage = $scope.data.message;\r\n              var re = /[ñÑáéíóúÁÉÍÓÚ¿¡´]/;\r\n              var tags = /%%+[a-zA-Z0-9_]+%%/;\r\n              var count = 0;\r\n              if (tags.test($scope.data.message)) {\r\n                $scope.existTags = true;\r\n                $scope.taggedMessage = \"\";\r\n                $scope.newMessage = \"\";\r\n                var words = $scope.data.message.split(\" \");\r\n                for (var cont = 0; cont < words.length; cont++) {\r\n                  var word = words[cont];\r\n                  var word2 = words[cont];\r\n                  if (word.substr(0, 2) == \"%%\" && (word.substr(-2) == \"%%\" || word.substr(-3) == \"%%,\" || word.substr(-3) == \"%%.\" || word.substr(-3) == \"%%;\")) {\r\n                    word = word.substr(2);\r\n                    //word2 = \"\";\r\n                    word = \"<b><i>\" + word;\r\n                    if (word.substr(-2) == \"%%\") {\r\n                      word = word.substr(0, word.length - 2);\r\n                    } else if (word.substr(-3) == \"%%,\" || word.substr(-3) == \"%%.\" || word.substr(-3) == \"%%;\") {\r\n                      word = word.substr(0, word.length - 3);\r\n                    }\r\n                    word = word + \"</i></b>\";\r\n                    count = count + word.length;\r\n                  }\r\n                  $scope.taggedMessage += word + \" \";\r\n                  $scope.newMessage += word2;\r\n                }\r\n              }\r\n            };\r\n            /*$scope.$watch(\"data.message\", function () {\r\n             var message = $scope.data.message;\r\n             var tags = /%%+[a-z0-9_]+%%/;\r\n             console.log(message);\r\n             }, true);*/\r\n            $scope.changeMessage = function () {\r\n              var message = $scope.data.message;\r\n              var tags = /%%+[a-z0-9_]+%%/;\r\n              /*if(tags.search(message)){\r\n               console.log(\"hola\");\r\n               }*/\r\n            };\r\n\r\n            $scope.countContacts = function () {\r\n                console.log('scope.data',$scope.data);\r\n              var type = '';\r\n              $scope.countError = false;\r\n              if ($scope.data.listSelected.id == 1) {\r\n                type = 'contactlist';\r\n              } else {\r\n                type = 'segment';\r\n              }\r\n              if (angular.isUndefined($scope.data.arrAddressee) || $scope.data.arrAddressee == 0) {\r\n                $scope.countContactsApproximate.counts = 0\r\n                return;\r\n              }\r\n              var data = {\r\n                type: type,\r\n                segment: $scope.data.arrAddressee,\r\n                contactlist: $scope.data.arrAddressee,\r\n                switchrepeated: $scope.switchrepeated\r\n              };\r\n              main.countContact(data).then(function (data) {\r\n                $scope.countContactsApproximate = data.data;\r\n                console.log('countContacts:',$scope.countContactsApproximate);\r\n                if($scope.countContactsApproximate.counts > 40000 && !$scope.divide){\r\n                  slideOnTop(\"Sobrepasa el maximo permitido de 40.000 Contactos\", 3000, \"glyphicon glyphicon-remove-sign\", \"warning\");\r\n                  return;\r\n                }\r\n                $scope.triggerEmailNotificationBalanceSmsContact($scope.countContactsApproximate.counts);\r\n              }).catch(\r\n                function (data) {\r\n                  $scope.countError = true;\r\n                  slideOnTop(/*data.data.message*/\"Sobrepasa el maximo permitido de 40.000 Contactos\", 3000, \"glyphicon glyphicon-remove-sign\", \"warning\");\r\n                }\r\n              );\r\n            };\r\n            $scope.getDetinatary = function (list) {\r\n//        $scope.countContactsApproximate.counts=1;\r\n              $scope.showAddressee = false;\r\n              $scope.data.arrAddressee = [];\r\n              if (list.id == 1) {\r\n                main.getcontactlist()\r\n                        .success(function (data) {\r\n                          $scope.showAddressee = true;\r\n                          $scope.listAllAddressee = data;\r\n                        })\r\n                        .catch(function (data) {\r\n                          slideOnTop(data.message, 3000, \"glyphicon glyphicon-remove-sign\", \"danger\");\r\n                        });\r\n              } else {\r\n                main.getsegments()\r\n                        .success(function (data) {\r\n                          $scope.showAddressee = true;\r\n                          $scope.listAllAddressee = data;\r\n                        })\r\n                        .catch(function (data) {\r\n                          slideOnTop(data.message, 3000, \"glyphicon glyphicon-remove-sign\", \"danger\");\r\n                        });\r\n              }\r\n            }\r\n\r\n\r\n            $scope.openPreview = function () {\r\n              $(\"#preview\").addClass('dialog--open');\r\n            }\r\n            $scope.closePreview = function () {\r\n              $(\"#preview\").removeClass('dialog--open');\r\n            }\r\n\r\n            $scope.addTag = function (tag) {\r\n              if (typeof $scope.data.message == \"undefined\") {\r\n                $scope.data.message = \"\";\r\n                $scope.data.message += tag;\r\n              } else {\r\n                var text = $scope.data.message + \" \" + tag;\r\n                if (text.length > 160 && $scope.morecaracter === false) {\r\n                  slideOnTop(\"No puede agregar esta etiqueta, ya que excede el límite de caracteres\", 3000, \"glyphicon glyphicon-remove-sign\", \"danger\");\r\n                  return false;\r\n                }else if(text.length > 300 && $scope.morecaracter === true){\r\n                  slideOnTop(\"No puede agregar esta etiqueta, ya que excede el límite de caracteres\", 3000, \"glyphicon glyphicon-remove-sign\", \"danger\");\r\n                  return false;                    \r\n                }\r\n                $scope.data.message += \" \" + tag;\r\n              }\r\n\r\n              $scope.validateInLine();\r\n            }\r\n\r\n            main.listfullsmstemplate().then(function (data) {\r\n              $scope.listfullsmstemplate = data;\r\n            });\r\n            $scope.smstemplate = function (data) {\r\n              $scope.viewTemplate = !data;\r\n            };\r\n            $scope.useTemplate = function () {\r\n              angular.forEach($scope.listfullsmstemplate, function (value, key) {\r\n                if (value.idSmsTemplate == $scope.idSmsTemplate) {\r\n                  $scope.addTag(value.content);\r\n                }\r\n              });\r\n            };\r\n            $scope.getOne = function () {\r\n\r\n              main.getOneSms(idSms).then(function (data)\r\n              {\r\n                $scope.sms = data;\r\n                $scope.idSms = $scope.sms.idSms;\r\n                $scope.name = $scope.sms.name;\r\n                $scope.not = false;\r\n                if ($scope.sms.notification == 1) {\r\n                  $scope.not = true;\r\n                }\r\n                if($scope.sms.morecaracter === true){\r\n                   $scope.morecaracter = true;\r\n                   $(\"#morecaracter\").prop('checked', true);\r\n                }else{\r\n                   $scope.morecaracter = false; \r\n                   $(\"#morecaracter\").prop('checked', false);\r\n                }\r\n                $scope.email = $scope.sms.email;\r\n                $scope.receiver = $scope.sms.receiver;\r\n                $scope.idSmsCategory = $scope.sms.idSmsCategory;\r\n                $scope.originalDate = $scope.sms.originalDate;\r\n                $scope.datenow = true;\r\n                $('#toggle-two').bootstrapToggle('off');\r\n\r\n \r\n\r\n                if ($scope.sms.dateNow == 1) {\r\n                  $scope.datenow = true;\r\n                  $('#toggle-two').bootstrapToggle('off');\r\n                }\r\n                if ($scope.sms.advancedoptions == 1) {\r\n                  $scope.advancedoptions = true;\r\n                  $('#toggle-three').bootstrapToggle('on');\r\n                }\r\n                if ($scope.sms.notification == 1) {\r\n                  $scope.not = true;\r\n                  $('#toggle-one').bootstrapToggle('on');\r\n                }\r\n                if ($scope.sms.divide == 1) {\r\n                  $scope.divide = true;\r\n                  $('#toggle-four').bootstrapToggle('on');\r\n                }\r\n                if($scope.sms.sendpush == 1){\r\n                  $scope.sendpush = true;\r\n                  $('#toggle-one').bootstrapToggle('on');\r\n                }\r\n                $scope.timezone;\r\n                $scope.AproximateSendings;\r\n                $scope.timeFormat = $scope.sms.timeFormat;\r\n                $scope.quantity = parseInt($scope.sms.quantity);\r\n//                $scope.gmt = $scope.sms.gmt;\r\n                $scope.gmt = $scope.sms.gmt;\r\n              });\r\n            };\r\n            $scope.getOne();\r\n            $scope.validateBalanceSmsContact();\r\n            \r\n            $scope.triggerEmailNotificationBalanceSmsContact = function (totalContacts){\r\n              if($scope.misc.totalAvailable<totalContacts){\r\n                    $scope.apismsContactEmailbalance = {};\r\n                    $scope.apismsContactEmailbalance.total = totalContacts;\r\n                    $scope.apismsContactEmailbalance.totalAvailable = $scope.misc.totalAvailable;\r\n                    $scope.sendMailNotificationSmsContactBalance();\r\n                   }\r\n              };\r\n//              \r\n              $scope.sendMailNotificationSmsContactBalance = function () {\r\n                   main.sendMailNotificationSmsBalance($scope.apismsContactEmailbalance).then(function (data) { \r\n                    });\r\n                }; \r\n            \r\n            $scope.selectAllList = function () {\r\n              console.log($scope.allList);\r\n              if ($scope.allList) {\r\n                $scope.data.arrAddressee = [];\r\n                for (let i = 0; i < $scope.listAllAddressee.length; i++) {\r\n                  $scope.data.arrAddressee.push($scope.listAllAddressee[i]);\r\n                }\r\n              } else {\r\n                $scope.data.arrAddressee = [];\r\n              }\r\n              $scope.countContacts();\r\n            }\r\n\r\n\r\n            \r\n            $scope.switchrepeatedclic = function (switchrepeated) {\r\n              $scope.switchrepeated = switchrepeated;\r\n              console.log($scope.switchrepeated);\r\n\r\n              if ($scope.switchrepeated !== true) {\r\n                $scope.switchrepeated = false;\r\n              }\r\n              if ($scope.switchrepeated == true) {\r\n                document.getElementById('repe1').style.display = \"block\";\r\n                document.getElementById('repe2').style.display = \"none\";\r\n                $scope.countContacts();\r\n              }\r\n              if ($scope.switchrepeated == false) {\r\n                document.getElementById('repe1').style.display = \"none\";\r\n                document.getElementById('repe2').style.display = \"block\";\r\n                $scope.countContacts();\r\n              }\r\n            }\r\n\r\n          }])\r\n        .controller('showContact', ['$rootScope', '$scope', '$http', 'main', '$window', '$timeout', 'notificationService', function ($rootScope, $scope, $http, main, $window, $timeout, notificationService) {\r\n            $scope.initial = 0;\r\n            $scope.page = 1;\r\n            $scope.getAll = function () {\r\n              main.getDetailSms(idSms, $scope.initial).then(function (res) {\r\n                $scope.listsms = res;\r\n              });\r\n            };\r\n            $scope.forward = function () {\r\n              $scope.initial += 1;\r\n              $scope.page += 1;\r\n              $scope.getAll();\r\n            };\r\n            $scope.fastforward = function () {\r\n              $scope.initial = ($scope.listsms.detail[1].total_pages - 1);\r\n              $scope.page = $scope.listsms.detail[1].total_pages;\r\n              $scope.getAll();\r\n            };\r\n            $scope.backward = function () {\r\n              $scope.initial -= 1;\r\n              $scope.page -= 1;\r\n              $scope.getAll();\r\n            };\r\n            $scope.fastbackward = function () {\r\n              $scope.initial = 0;\r\n              $scope.page = 1;\r\n              $scope.getAll();\r\n            };\r\n            $scope.getAll();\r\n            $scope.traslateStatus = function (status) {\r\n              var string = \"\";\r\n              switch (status) {\r\n                case \"sent\":\r\n                  string = \"Enviado\";\r\n                  break;\r\n                case \"undelivered\":\r\n                  string = \"No enviado\";\r\n                  break;\r\n              }\r\n              return string;\r\n            };\r\n          }])\r\n        .factory('notificationService', function () {\r\n          function error(message) {\r\n            slideOnTop(message, 4000, 'glyphicon glyphicon-remove-circle', 'danger');\r\n          }\r\n\r\n          function success(message) {\r\n            slideOnTop(message, 4000, 'glyphicon glyphicon-ok-circle', 'success');\r\n          }\r\n\r\n          function warning(message) {\r\n            slideOnTop(message, 4000, 'glyphicon glyphicon-exclamation-sign', 'warning');\r\n          }\r\n\r\n          function notice(message) {\r\n            slideOnTop(message, 4000, 'glyphicon glyphicon-exclamation-sign', 'notice');\r\n          }\r\n\r\n          function primary(message) {\r\n            slideOnTop(message, 4000, 'glyphicon glyphicon-exclamation-sign', 'primary');\r\n          }\r\n\r\n          return {\r\n            error: error,\r\n            success: success,\r\n            warning: warning,\r\n            notice: notice,\r\n            primary: primary\r\n          };\r\n        });\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ]);